[{
        "category": ["Numbers", "Basics", "Directed Numbers"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": "\n\nvar qNum={\n a\t:\tnonZeroRand(-10,10),\n b\t:\tnonZeroRand(-10,10),\n c\t:\tnonZeroRand(-10,10),\n pm1\t:\trandomInt(0,1),\n pm2\t:\trandomInt(0,1),\n \"$\"\t:\t\"`\"\t\n };\n if(qNum['pm1'])\n {\n qNum['pm1']='+';\n qNum['pb']=qNum['b'];\n }\n else\n {\n qNum['pm1']='-';\n qNum['pb']=-qNum['b'];\n }\n if(qNum['pm2'])\n {\n qNum['pm2']='+';\n qNum['pc']=qNum['c'];\n }\n else\n {\n qNum['pm2']='-';\n qNum['pc']=-qNum['c'];\n }\n qNum['apb']=qNum['a']+qNum['pb'];\n qNum['apbpc']=qNum['a']+qNum['pb']+qNum['pc'];\n qNum['question']='<p>Evaluate the following expression:<\/p><p> [$][a][pm1] [+b][pm2] [+c]=[$]<\/p><p> Show ALL working.<\/p>';\n qNum['answer']='<p>[$][pm1] [+b]=[pb][$]<\/p><p>[$][pm2] [+c]=[pc][$]<\/p><p>So the expression becomes:<\/p><p>[$][a][+pb][+pc][$]<\/p><p>Then<\/p><p>[$][a][+pb]=[apb][$]<\/p><p>and so<\/p><p>[$][apb][+pc]=[apbpc][$]<\/p>';\n\n        "
    }, {
        "category": ["Numbers", "Basics", "Order of Operations"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n\t  var qNum={\n\t\ta\t:\tnew Fraction(nonZeroRand(-10,10),1),\n\t\tb\t:\tnew Fraction(nonZeroRand(-10,10),1),\n\t\tc\t:\tnew Fraction(nonZeroRand(-10,10),1),\n\t\td\t:\tnew Fraction(nonZeroRand(-10,10),1),\n\t\tsym1\t:\t   randomOp(),\n\t\tsym2\t:\t   randomOp(),\n\t\tsym3\t:\t   randomOp(),\n\t\tquest   :\tMath.floor(Math.random()*6),\n\t\tbo1\t :\t   '',\n\t\tbo2\t :\t   '',\n\t\tbc1\t :\t   '',\n\t\tbc2\t :\t   '',\n\t\t\"$\"\t:\t\"`\"\t\n\t  };\n\t  var nobrackets=true;\n\t  \n\t  function isMult(test){\n\t  if(test=='xx' || test=='-:')\n\t\t  return true;\n\t  else\n\t\t  return false;\n\t  }\n\t  \n\t  function doMathOp(sym,a,b)\n\t  {\n\t\tswitch(sym)\n\t\t{\n\t\t  case 'xx':\n\t\t\t  return a.mult(b);\n\t\t  case '-:':\n\t\t\t  return a.div(b);\n\t\t  case '+':\n\t\t\t  return a.add(b);\n\t\t  case '-':\n\t\t\t  return a.sub(b);\n\t\t}\n\t  }\n\t  \n\t  var doFirst=0;\n\t  switch(qNum['quest'])\n\t  {\n\t\tcase 0:\n\t\t\tqNum['quest']=process('[a][sym1] [b][sym2] [c][sym3] [d]',qNum);\n\t\t\tif(isMult(qNum['sym1']) || (!isMult(qNum['sym1'])&&!isMult(qNum['sym2'])&&!isMult(qNum['sym3'])))\n\t\t\t  doFirst=1;\n\t\t\telse if(isMult(qNum['sym2']))\n\t\t\t  doFirst=2;\n\t\t\telse\n\t\t\t  doFirst=3\t\t\t\t\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tqNum['quest']=process('([a][sym1] [b])[sym2]([c][sym3] [d])',qNum);\n\t\t\tdoFirst=1;\n\t\t\tnobrackets=false;\n\t\t\tqNum['bo2']='(';\n\t\t\tqNum['bc2']=')';\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tqNum['quest']=process('([a][sym1] [b])[sym2] [c][sym3] [d]',qNum);\n\t\t\tdoFirst=1;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tqNum['quest']=process('[a][sym1] [b][sym2]([c][sym3] [d])',qNum);\n\t\t\tdoFirst=3;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tqNum['quest']=process('([a][sym1] [b][sym2] [c])[sym3] [d]',qNum);\n\t\t\tnobrackets=false;\n\t\t\tqNum['bo1']='(';\n\t\t\tqNum['bc1']=')';\n\t\t\tif(isMult(qNum['sym1']) || (!isMult(qNum['sym1'])&&!isMult(qNum['sym2'])))\n\t\t\t  doFirst=1;\n\t\t\telse\n\t\t\t  doFirst=2;\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tqNum['quest']=process('[a][sym1]([b][sym2] [c][sym3] [d])',qNum);\n\t\t\tnobrackets=false;\n\t\t\tqNum['bo2']='(';\n\t\t\tqNum['bc2']=')';\n\t\t\tif(isMult(qNum['sym2']) || (!isMult(qNum['sym2'])&&!isMult(qNum['sym3'])))\n\t\t\t  doFirst=2;\n\t\t\telse\n\t\t\t  doFirst=3;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tqNum['quest']='oops!';\n\t  }\n\t  \n\tswitch(doFirst)\n\t{\n\t\tcase 1:\n\t\t\t\tqNum['sym4']=qNum['sym1'];\n\t\t\t\tqNum['e']=qNum['a'];\n\t\t\t\tqNum['f']=qNum['b'];\n\t\t\t\tqNum['h']=qNum['g']=doMathOp(qNum['sym1'],qNum['a'],qNum['b']);\n\t\t\t\tqNum['i']=qNum['c'];\n\t\t\t\tqNum['j']=qNum['d'];\n\t\t\t\tqNum['sym5']=qNum['sym2'];\n\t\t\t\tqNum['sym6']=qNum['sym3'];\n\t\t\t\tbreak;\n\t\tcase 2:\n\t\t\t\tqNum['sym4']=qNum['sym2'];\n\t\t\t\tqNum['e']=qNum['b'];\n\t\t\t\tqNum['f']=qNum['c'];\n\t\t\t\tqNum['i']=qNum['g']=doMathOp(qNum['sym2'],qNum['b'],qNum['c']);\t\t\t\t\n\t\t\t\tqNum['h']=qNum['a'];\n\t\t\t\tqNum['j']=qNum['d'];\n\t\t\t\tqNum['sym5']=qNum['sym1'];\n\t\t\t\tqNum['sym6']=qNum['sym3'];\n\t\t\t\tbreak;\n\t\tcase 3:\n\t\t\t\tqNum['sym4']=qNum['sym3'];\n\t\t\t\tqNum['e']=qNum['c'];\n\t\t\t\tqNum['f']=qNum['d'];\n\t\t\t\tqNum['j']=qNum['g']=doMathOp(qNum['sym3'],qNum['c'],qNum['d']);\n\t\t\t\tqNum['h']=qNum['a'];\n\t\t\t\tqNum['i']=qNum['b'];\n\t\t\t\tqNum['sym5']=qNum['sym1'];\n\t\t\t\tqNum['sym6']=qNum['sym2'];\n\t\t\t\tbreak;\n\t\tdefault:\n\t\t\tqNum['quest']='oops!';\n\t  }\n\t  \n\t  if(qNum['bo2'] || (nobrackets && isMult(qNum['sym6']) && !isMult(qNum['sym5'])))\n\t  {\n\t\t  qNum['k']=qNum['i'];\n\t\t  qNum['l']=qNum['j'];\n\t\t  qNum['sym7']=qNum['sym6'];\n\t\t  qNum['o']=qNum['m']=doMathOp(qNum['sym6'],qNum['i'],qNum['j']);\t\t  \n\t\t  qNum['n']=qNum['h'];\n\t\t  qNum['sym8']=qNum['sym5'];\n\t  }\n\t  else\n\t  {\n\t\t  qNum['k']=qNum['h'];\n\t\t  qNum['l']=qNum['i'];\n\t\t  qNum['sym7']=qNum['sym5'];\n\t\t  qNum['n']=qNum['m']=doMathOp(qNum['sym5'],qNum['h'],qNum['i']);\t\t  \n\t\t  qNum['o']=qNum['j'];\n\t\t  qNum['sym8']=qNum['sym6'];\n\t  }\n\t  if(qNum['sym8']=='xx')\n\t\t  qNum['p']=qNum['n'].mult(qNum['o']);\n\t  else if(qNum['sym8']=='-:')\n\t\t  qNum['p']=qNum['n'].div(qNum['o']);\n\t  else if(qNum['sym8']=='+')\n\t\t  qNum['p']=qNum['n'].add(qNum['o']);\n\t  else\n\t\t  qNum['p']=qNum['n'].sub(qNum['o']);\n\t  if(qNum['p'].string() != qNum['p'].improperString())\n\t\t  qNum['p']=qNum['p'].string()+'='+qNum['p'].improperString();\n\t  else\n\t\t  qNum['p']=qNum['p'].string();\n        qNum['question']='<p>Evaluate the following expression:<\/p><p>[$][quest]=[$]<\/p><p> Show ALL working.<\/p>';\n        qNum['answer']='<p>First do [$][e][sym4] [f]=[g][$]<\/p><p>Then we have [$][bo1][h][sym5] [bo2][i][bc1][sym6] [j][bc2][$]<\/p><p>Next do [$][k][sym7] [l]=[m][$]<\/p><p>and we have [$][n][sym8] [o]=[p][$]<\/p>';\n        \n        "
    }, {
        "category": ["Numbers", "Indices", "Multiplication, Division and Powers"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\n var qNum={\n b1\t:\tMath.floor(Math.random()*11)+2,\n i1\t:\tMath.floor(Math.random()*21)-5,\n i2\t:\tMath.floor(Math.random()*21)-5,\n i3:Math.floor(Math.random()*21)-5,\n                sym    :       Math.floor(Math.random()*2),\n                qType   :       Math.floor(Math.random()*3),\n                bo      :       '(',\n                bc      :       ')',\n                '^1'    :       '^',\n                '^2'    :       '^',\n                'Explain2':     '',\n                                \"$\"\t:\t\"`\"\t\n                };\n        var multiply=true;\n        qNum['b2']=qNum['b1'];\n        switch(qNum['sym']){\n            case 0:\n                qNum['sym']='xx';\n                qNum['i4']=qNum['i1']+qNum['i2'];\n                qNum['Explain1']='[$]'+qNum['i1']+'+ '+qNum['i2']+'='+qNum['i4']+'[$],<br\/>';\n                break;\n            case 1:\n                qNum['sym']='-:';\n                multiply=false;\n                qNum['i4']=qNum['i1']-qNum['i2'];\n                qNum['Explain1']='[$] '+qNum['i1']+'-'+qNum['i2']+'='+qNum['i4']+' [$],<br\/>';\n                break;\n            default:\n                qNum['sym']='oops!';\n        }\n        switch(qNum['qType']){\n            case 0:\n                qNum['i3']=qNum['^2']=qNum['bo']=qNum['bc']='';\n                qNum['Explain1']+=' so:';\n                break;\n            case 1:\n                qNum['sym']=qNum['i2']=qNum['^1']=qNum['b2']='';\n                qNum['i4']=qNum['i1']*qNum['i3'];\n                qNum['Explain1']='[$]'+qNum['i1']+'xx'+qNum['i3']+'='+qNum['i4']+'[$],<br\/> so';\n                break;\n            case 2:\n                qNum['^2']='^';\n                qNum['bo']='(';\n                qNum['bc']=')';\n                qNum['Explain2']='[$]'+qNum['i4']+'xx'+qNum['i3']+'=';\n                qNum['Explain1']+=' and<br\/>';\n                qNum['i4']*=qNum['i3'];\n                qNum['Explain2']+=qNum['i4']+'[$],<br\/> so';\n                qNum['Explain2']=process(qNum['Explain2'],qNum);\n                break;\n            default:\n                alert('oops qType='+qNum['qType']);\n        }\n        if(qNum['i4']<0){\n            qNum['=']='=1\/([b1]^'+Math.abs(qNum['i4'])+')';\n            if(Math.pow(qNum['b1'],Math.abs(qNum['i4']))<10000)\n                qNum['=']+='=1\/'+Math.pow(qNum['b1'],Math.abs(qNum['i4']));\n        }\n        else{\n            qNum['=']=Math.pow(qNum['b1'],qNum['i4']);\n            if(qNum['=']>999999||qNum['=']<1)\n                qNum['=']='';\n            else\n                qNum['=']='='+qNum['='];\n        }\n        qNum['=']=process(qNum['='],qNum);\n        qNum['Explain1']=process(qNum['Explain1'],qNum);\n        qNum['question']='<p>Simplify the following expression as much as possible:<\/p><p> [$][bo][b1]^[i1][sym][b2][^1][i2][bc][^2][i3][$]<\/p><p> Show ALL working.<\/p>';\n        qNum['answer']='<p>[Explain1][Explain2]<\/p><p>[$]=[b1]^[i4][=][$]<\/p>';\n        \n        "
    }, {
        "category": ["Numbers", "Indices", "Negative and Fractional Powers"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n          \n                var qNum={\n                n\t:\tMath.floor(Math.random()*7)+2,\n                brn     :       Math.floor(Math.random()*5)+2,\n                First   :       'First find',\n                ifpow   :       '<p>Now find [$][brn]^[m][$]<\/p><p>[$][brn]^[m]=[brnpm][$]<\/p>',\n                rootn   :       'root [n]',\n                                minus\t:\tMath.floor(Math.random()*2),\n                ifneg   :       '',\n                                \"$\"\t:\t\"`\"\t\n                };\n        do{\n            qNum['m']=Math.floor(Math.random()*1.5*qNum['n'])+1;\n        }while(qNum['m']==qNum['n']);\n        var g=gcd(qNum['m'],qNum['n']);\n        qNum['m']\/=g;\n        qNum['n']\/=g;\n        qNum['b']=Math.pow(qNum['brn'],qNum['n']);\n        qNum['brnpm']=Math.pow(qNum['brn'],qNum['m']);\n        if(qNum['n']==2)\n            qNum['rootn']='sqrt';\n        if(qNum['m']==1){\n            qNum['First']='Find';\n            qNum['ifpow']=qNum['dopow']='';\n        }\n        if(qNum['minus'])\n            qNum['minus']='';\n        else{\n            qNum['minus']='-';\n            qNum['ifneg']='Since the power is negative, the answer is: [$]1\/('+qNum['brnpm']+')[$]';\n        }\n                qNum['question']='<p>Simplify the following expression as much as possible:<\/p><p> [$][b]^([minus][m]\/[n])[$]<\/p><p> Show ALL working.<\/p>';\n        qNum['answer']='<p>[First] [$][?rootn]([b])[$]<\/p><p>[$][?rootn]([b])=[brn][$] <br\/>(because [$][brn]^[n]=[b][$])<\/p>[?ifpow]<p>[?ifneg]<\/p>';\n                        \n        "
    }, {
        "category": ["Numbers", "Basics", "Scientific Notation"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n    var number = randomLowInt(1, 99999999), exp = randomLowInt(1, 99)*nonZeroRand(-1,1), sci = randomInt(0, 1), sNumber, digit = 0, zeros = '';\n    while (number \/ Math.pow(10, digit) >= 10)\n        digit++;\n    sNumber='`'+number \/ Math.pow(10, digit)+'xx 10^'+exp+'`';\n    if (exp > 0) {\n        for (var i = 0; i < exp - digit; i++) {\n            if (i % 3 == (exp-digit)%3)\n                zeros += ' ';\n            zeros += '0';\n        }\n        if(zeros)\n            number += zeros;\n        else\n            number\/=Math.pow(10,digit-exp);\n    }\n    else {\n        zeros = '0.';\n        for (var i = exp + 1; i < 0; i++) {            \n            if (i % 3 == (exp + 1)%3)\n                zeros += ' ';\n            zeros += '0';\n        }\n        number = zeros + number;\n    }\n    var qNum={\n        'asthis': sci ? 'in scientific notation' : 'as a normal number',\n        'number': sci ? number : sNumber,\n        'ans': sci ? sNumber : number,\n        \"$\": \"`\"\n    };\n        qNum['question']='<p>Write [number] [asthis]<\/p>';\n        qNum['answer']='<p>[ans]<\/p>';\n\t\t\t\n        "
    }, {
        "category": ["Numbers", "Fractions", "Fractions (proper)"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n            var qNum={\n                    a       :   nonZeroRand(-12,15),\n                    b       :   randomInt(2,20),\n                    c       :   nonZeroRand(-12,15),\n                    d       :   randomInt(2,20),\n                    sym     :   randomOp(),\n                    ifaddsub:   'First find a common denominator<\/p><p>[g] is the lowest common multiple of [b] and [d].<\/p><p>[$]([a]xx[ap])\/([b]xx[ap]) [sym] ([c]xx[cp])\/([d]xx[cp])= [ag]\/[g] [sym] [cg]\/[g]',\n                    ifmult  :   '',\n                    ifdiv   :   '',\n                    ifsimplify: '',\n                    \"$\"     :   \"`\"\n            };\n            if(qNum['c']<0 && (qNum['sym']==='+'||qNum['sym']==='-'))\n                qNum['c']*=-1;\n            var f1=new Fraction(qNum['a'],qNum['b']);\n            var f2=new Fraction(qNum['c'],qNum['d']);\n            qNum['a']=f1.numerator;\n            qNum['b']=f1.denominator;\n            qNum['c']=f2.numerator;\n            qNum['d']=f2.denominator;\n            qNum['ab']=f1.string();\n            qNum['cd']=f2.string();\n            qNum['g']=lcm(qNum['b'],qNum['d']);\n            qNum['ap']=qNum['g']\/qNum['b'];\n            qNum['cp']=qNum['g']\/qNum['d'];\n            qNum['ag']=qNum['a']*qNum['ap'];\n            qNum['cg']=qNum['c']*qNum['cp'];\n            switch(qNum['sym']){\n                case '+':\n                    f1=f1.add(f2);\n                    qNum['rawN']=qNum['ag']+qNum['cg'];\n                    qNum['rawD']=qNum['g'];\n                    if(qNum['b']===qNum['d'])\n                        qNum['ifaddsub']='The denominators are the same, so add their numerators.<\/p><p>[$][a]\/[b] [sym] [c]\/[d]';\n                    break;\n                case '-':\n                    f1=f1.sub(f2);\n                    qNum['rawN']=qNum['ag']-qNum['cg'];\n                    qNum['rawD']=qNum['g'];\n                    if(qNum['b']===qNum['d'])\n                        qNum['ifaddsub']='The denominators are the same, so subtract their numerators.<\/p><p>[$][a]\/[b] [sym] [c]\/[d]';\n                    break;\n                case 'xx':\n                    f1=f1.mult(f2);\n                    qNum['ifaddsub']='';\n                    qNum['ifmult']='Multiply the numerators then the denominators.<\/p><p>[$]([a]xx[c])\/([b]xx[d])';\n                    qNum['rawN']=qNum['a']*qNum['c'];\n                    qNum['rawD']=qNum['b']*qNum['d'];\n                    break;\n                case '-:':\n                    f1=f1.div(f2);\n                    qNum['ifaddsub']='';\n                    qNum['ifdiv']='First, invert the second fraction,<br\/> then multiply the numerators then the denominators.<\/p><p>[$][a]\/[b]xx[d]\/[c]=([a]xx[d])\/([b]xx[c])';\n                    qNum['rawN']=qNum['a']*qNum['d'];\n                    qNum['rawD']=qNum['b']*qNum['c'];\n                    break;\n            }\n            if(f1.numerator!==qNum['rawN']){\n                var gd=gcd(Math.abs(qNum['rawN']),Math.abs(qNum['rawD']));\n                qNum['ifsimplify']='Then simplify:<\/p><p>[$]([rawN]-:'+gd+')\/([rawD]-:'+gd+')='+f1.string()+'[$]';\n            }\n        qNum['question']='<p>Evaluate the following expression as a single fraction in its simplest form:<\/p><p> [$][ab] [sym] [cd][$]<\/p><p> Show ALL working.<\/p><p>Do not use a calculator<br\/>(except for basic operations [$]+,-,xx,-:[$])<\/p>';\n        qNum['answer']='<p>[?ifaddsub][?ifmult][?ifdiv]=[rawN]\/[rawD][$]<\/p><p>[?ifsimplify]<\/p>';\n\t\t\t\n        "
    }, {
        "category": ["Numbers", "Fractions", "Fractions (mixed)"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n            var qNum={\n                    a       :   nonZeroRand(1,50),\n                    b       :   randomInt(2,10),\n                    c       :   nonZeroRand(1,50),\n                    d       :   randomInt(2,10),\n                    sym     :   randomOp(),\n                    ifaddsub:   '[g] is the lowest common multiple of [b] and [d].<\/p><p>[$]([a]xx[ap])\/([b]xx[ap]) [sym] ([c]xx[cp])\/([d]xx[cp])= [ag]\/[g] [sym] [cg]\/[g]',\n                    ifcontext:  '<p>First convert any Mixed fractions to improper.<\/p><p>',\n                    ifcon1  :   '[$][ab]=[iab][$]',\n                    ifcon2  :   '[$][cd]=[icd][$]',\n                    ifmult  :   '',\n                    ifdiv   :   '',\n                    ifsimplify: '',\n                    iraw    :   '',\n                    \"$\"     :   \"`\"\n            };\n            var con1=true;\n            var con2=true;\n            if(qNum['c']<0 && (qNum['sym']==='+'||qNum['sym']==='-'))\n                qNum['c']*=-1;\n            var f1=new Fraction(qNum['a'],qNum['b']);\n            var f2=new Fraction(qNum['c'],qNum['d']);\n            qNum['a']=f1.numerator;\n            qNum['b']=f1.denominator;\n            qNum['c']=f2.numerator;\n            qNum['d']=f2.denominator;\n            if(f1.improper==false || f1.whole){\n                con1=false;\n                qNum['ifcon1']='';\n            }\n            if(f2.improper==false || f2.whole){\n                con2=false;\n                qNum['ifcon2']='';\n            }\n            if(con1==false&&con2==false)\n                qNum['ifcontext']='';\n            if(con1 && con2)\n                qNum['ifcon2']=' and '+qNum['ifcon2'];\n            qNum['ab']=f1.improperString();\n            qNum['cd']=f2.improperString();\n            qNum['iab']=f1.string();\n            qNum['icd']=f2.string();\n            qNum['g']=lcm(qNum['b'],qNum['d']);\n            qNum['ap']=qNum['g']\/qNum['b'];\n            qNum['cp']=qNum['g']\/qNum['d'];\n            qNum['ag']=qNum['a']*qNum['ap'];\n            qNum['cg']=qNum['c']*qNum['cp'];\n            switch(qNum['sym']){\n                case '+':\n                    f1=f1.add(f2);\n                    qNum['rawN']=qNum['ag']+qNum['cg'];\n                    qNum['rawD']=qNum['g'];\n                    if(qNum['b']===qNum['d'])\n                        qNum['ifaddsub']='The denominators are the same, so add their numerators.<\/p><p>[$][a]\/[b] [sym] [c]\/[d]';\n                    break;\n                case '-':\n                    f1=f1.sub(f2);\n                    qNum['rawN']=qNum['ag']-qNum['cg'];\n                    qNum['rawD']=qNum['g'];\n                    if(qNum['b']===qNum['d'])\n                        qNum['ifaddsub']='The denominators are the same, so subtract their numerators.<\/p><p>[$][a]\/[b] [sym] [c]\/[d]';\n                    break;\n                case 'xx':\n                    f1=f1.mult(f2);\n                    qNum['ifaddsub']='';\n                    qNum['ifmult']='Multiply the numerators then the denominators.<\/p><p>[$]([a]xx[c])\/([b]xx[d])';\n                    qNum['rawN']=qNum['a']*qNum['c'];\n                    qNum['rawD']=qNum['b']*qNum['d'];\n                    break;\n                case '-:':\n                    f1=f1.div(f2);\n                    qNum['ifaddsub']='';\n                    qNum['ifdiv']='Invert and multiply.<\/p><p>[$][a]\/[b]xx[d]\/[c]=([a]xx[d])\/([b]xx[c])';\n                    qNum['rawN']=qNum['a']*qNum['d'];\n                    qNum['rawD']=qNum['b']*qNum['c'];\n                    break;\n            }\n            if(f1.numerator!==qNum['rawN']){\n                var gd=gcd(Math.abs(qNum['rawN']),Math.abs(qNum['rawD']));\n                qNum['ifsimplify']='Then simplify: [$]([rawN]-:'+gd+')\/([rawD]-:'+gd+')='+f1.string();\n                if(f1.improper)\n                    qNum['ifsimplify']+='='+f1.improperString()+'[$]';\n                else\n                    qNum['ifsimplify']+='[$]';\n            }\n            else if(f1.improper)\n                qNum['iraw']='='+f1.improperString();\n        qNum['question']='<p>Evaluate the following expression as a single fraction in its simplest form:<\/p><p> [$][ab] [sym] [cd][$]<\/p><p> Show ALL working.<\/p><p>Do not use a calculator<br\/>(except for basic operations [$]+,-,xx,-:[$])<\/p>';\n        qNum['answer']='<p>[?ifaddsub][?ifmult][?ifdiv]=[rawN]\/[rawD][?iraw][$]<\/p><p>[?ifsimplify]<\/p>';                \n\t\t\t\n        "
    }, {
        "category": ["Numbers", "Decimals", "Rounding Off"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n            var start=randomInt(0,8);\n            var stop=randomInt(start+1,9);\n            var digits=[0,0,0,0,0,0,0,0,0,0];\n            var anDigits=[0,0,0,0,0,0,0,0,0,0];\n            var qNum={\n                    pre     :   randomInt(1,stop-start),\n                    type    :   randomInt(0,1),\n                    number  :   '',\n                    ans  :   '',\n                    \"$\"     :   \"`\"\n            };\n            var j=1;\n            if(qNum['type']){\n                j=start-4;\n                stop=randomInt(Math.max(start,6),9);\n                qNum['pre']=randomInt(Math.max(start-4,1),stop-5);\n            }\n            var stopper=start+qNum['pre'];\n            if(qNum['type'])\n                stopper=5+qNum['pre'];\n            for(var i=start; i<=stop; i++){\n                if(i===start)\n                    if(start===0)\n                        digits[i]=randomInt(1,8);\n                    else\n                        digits[i]=randomInt(1,9);\n                else\n                    digits[i]=randomInt(0,9);\n                anDigits[i]=digits[i];\n            }\n            if(digits[stopper]>4){\n                anDigits[stopper-1]+=1;\n                var n=stopper-1;\n                while(anDigits[n]===10){\n                    anDigits[n]=0;\n                    n-=1;\n                    anDigits[n]+=1;\n                }\n            }\n            for(var i=stopper;i<10;i++)\n                anDigits[i]=0;\n\n            if(start>4){\n                stopper=start;\n                if(qNum['type'])\n                    stopper=5+qNum['pre'];\n                qNum['number']=qNum['ans']='0.';\n                for(var i=5;i<start;i++){\n                    qNum['number']+='0';\n                    if(i<stopper)\n                        qNum['ans']+='0';\n                }\n            }\n            for(var i=start; i<=stop; i++, j++){\n                if(i===5 && i!=start){\n                    qNum['number']+='.';\n                    if(j<=qNum['pre'])\n                        qNum['ans']+='.';\n                }\n                qNum['number']+=digits[i];\n                if(j<=qNum['pre'])\n                    qNum['ans']+=anDigits[i];\n                else if(qNum['type']===0&& i<5)\n                        qNum['ans']+='0';\n            }\n            if(stop<4){\n                stopper=5;\n                if(qNum['type'])\n                    stopper=5+qNum['pre'];\n                for(var i=stop+1;i<stopper;i++){\n                    if(i==5)\n                        qNum['ans']+='.';\n                    if(i<5)\n                        qNum['number']+='0';\n                    qNum['ans']+='0';\n                }\n            }\n            if(qNum['type']){\n                qNum['rnd']='('+qNum['pre']+'dp)';\n                qNum['pre']+=' decimal places.';\n            }\n            else{\n                qNum['rnd']='('+qNum['pre']+'sf)';\n                qNum['pre']+=' significant figures.';\n            }\n        qNum['question']='<p>Round [$][number][$] to [pre]<\/p>';\n        qNum['answer']='<p>[$]=[ans][$] [rnd]<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Numbers", "Decimals", "Conversion to Fraction"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n    var number = randomDigitInt(),\n            exp = randomLowInt(1, 10, 3),\n            index = Math.pow(10, exp),\n            integer = Math.floor(number \/ index),\n            rational, alt = '', altUnsimplified,\n            altRational = new Fraction(1, 1);\n    if (integer) {\n        rational = number % (integer * index);\n        if(rational){\n            alt = '<p>or<br\/>[$][altanswer][$]<\/p>';\n            altRational = new Fraction(rational, index);\n            altUnsimplified = integer + ' ' + rational + '\/' + index;\n        }\n    }\n    else {\n        rational = '';\n        for (var i = 0; i < exp - number.toString().length; i++)\n            rational += '0';\n        rational += number;\n    }\n    var answer = new Fraction(parseInt(rational), index).add(integer);\n    var unsimplified = number + '\/' + index;\n    var qNum={\n        \"number\": integer + '.' + rational,\n        \"ans\": unsimplified,\n        \"or\": alt,\n        \"altanswer\": altUnsimplified,\n        \"$\": \"`\"\n    };\n    if (unsimplified != answer.string())\n        qNum['ans'] += '=' + answer.string();\n    if (altUnsimplified != answer.improperString())\n        qNum['altanswer'] += '=' + answer.improperString();\n        qNum['question']='<p>Write [number] as a fraction or mixed number<\/p>';\n        qNum['answer']='<p>[$][ans][$]<\/p>[?or]';\n\t\t\t\n        "
    }, {
        "category": ["Numbers", "Ratio", "Simplifying"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n\t    var qType=randomInt(0,3), g=0;\n            var qNum={\n\t\t    ':'\t:\t'',\n\t\t    c\t:\t'',\n\t\t    z\t:\t'',\n                    \"$\"     :   \"`\"\n            };\n\t    switch(qType){\n\t\tcase 0:\n\t\t    do{\n\t\t\tqNum['a']=randomInt(2,20);\n\t\t\tqNum['b']=randomInt(2,20);\n\t\t\tg=gcd(qNum['a'],qNum['b']);\n\t\t    }\n\t\t    while(g==1);\n\t\t    qNum['x']=qNum['a']\/g;\n\t\t    qNum['y']=qNum['b']\/g;\n\t\t    break;\n\t\tcase 1:\n\t\t    qNum[':']=':';\n\t\t    do{\n\t\t\tqNum['a']=randomInt(2,20);\n\t\t\tqNum['b']=randomInt(2,20);\n\t\t\tqNum['c']=randomInt(2,20);\n\t\t\tg=gcd(qNum['a'],qNum['b']);\n\t\t\tg=gcd(g,qNum['c']);\n\t\t    }\n\t\t    while(g==1);\n\t\t    qNum['x']=qNum['a']\/g;\n\t\t    qNum['y']=qNum['b']\/g;\n\t\t    qNum['z']=qNum['c']\/g;\n\t\t    break;\n\t\tcase 2:\n\t\t    var units=['sec','min','h'];\n\t\t    var type1=randomInt(0,2);\n\t\t    var type2=randomInt(0,2);\n\t\t    do{\n\t\t\tqNum['a']=randomInt(1,40);\n\t\t\tqNum['b']=randomInt(1,40);\n\t\t\tg=gcd(qNum['a']*Math.pow(60,type1),qNum['b']*Math.pow(60,type2));\n\t\t    }\n\t\t    while(g==1);\n\t\t    qNum['x']=qNum['a']*Math.pow(60,type1)\/g;\n\t\t    qNum['y']=qNum['b']*Math.pow(60,type2)\/g;\n\t\t    qNum['a']+=units[type1];\n\t\t    qNum['b']+=units[type2];\n\t\t    break;\n\t\tcase 3:\n\t\t    var units=['mm','m','km'];\n\t\t    var type1=randomInt(0,2);\n\t\t    var type2=randomInt(0,2);\n\t\t    do{\n\t\t\tqNum['a']=randomInt(1,100);\n\t\t\tqNum['b']=randomInt(1,100);\n\t\t\tg=gcd(qNum['a']*Math.pow(1000,type1),qNum['b']*Math.pow(1000,type2));\n\t\t    }\n\t\t    while(g==1);\n\t\t    qNum['x']=qNum['a']*Math.pow(1000,type1)\/g;\n\t\t    qNum['y']=qNum['b']*Math.pow(1000,type2)\/g;\n\t\t    qNum['a']+=units[type1];\n\t\t    qNum['b']+=units[type2];\n\t\t    break;\n            }\n        qNum['question']='<p>Express the following ratio in its simplest form:<\/p><\/p>[$][a]:[b][:][c][$]<\/p>';\n        qNum['answer']='<p>[$][x]:[y][:][z][$]<\/p>';        \n\t\t\t\n        "
    }, {
        "category": ["Numbers", "Ratio", "Finding a Quantity"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n\t    var types=['cats','dogs','men','women','apples','oranges','pears','pens','pencils','lollies','coins','marbles','stones','eggs'];\n\t    var first=randomInt(0,1);\n            var qNum={\n\t\ta\t:\trandomInt(1,10),\n\t\tb\t:\trandomInt(1,10),\n\t\tz\t:\t'',\n\t\t\"$\"     :   \"`\"\n            };\n\t    if(qNum['a']==qNum['b'])\n\t\tqNum['b']+=1;\n\t    var g=gcd(qNum['a'],qNum['b']);\n\t    qNum['a']\/=g;\n\t    qNum['b']\/=g;\n\t    qNum['thing1']=types[randomInt(0,types.length-1)];\n\t    do{\n\t\tqNum['thing2']=types[randomInt(0,types.length-1)];\n\t    }\n\t    while(qNum['thing1']==qNum['thing2']);\n\t    var scale=randomInt(2,15);\n\t    if(first){\n\t\tqNum['x']=qNum['p']=qNum['a']*scale;\n\t\tqNum['y']=qNum['q']=qNum['b']*scale;\n\t\tqNum['frac']=qNum['b']+'\/'+qNum['a'];\n\t\tqNum['things1']=qNum['thing1'];\n\t\tqNum['things2']=qNum['thing2'];\n\t    }\n\t    else{\n\t\tqNum['y']=qNum['p']=qNum['b']*scale;\n\t\tqNum['x']=qNum['q']=qNum['a']*scale;\n\t\tqNum['frac']=qNum['a']+'\/'+qNum['b'];\n\t\tqNum['things1']=qNum['thing2'];\n\t\tqNum['things2']=qNum['thing1'];\n\t    }\n        qNum['question']='<p>The ratio of [thing1] to [thing2] is [$][a]:[b][$]. If there are [p] [things1] then how many [things2] are there?<\/p>';\n        qNum['answer']='<p>[$][a]:[b]=[x]:[y][$]<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Numbers", "Ratio", "Dividing a Total"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n\t    var first=randomInt(0,1);\n            var qNum={\n\t\t    a\t:\trandomInt(1,10),\n\t\t    b\t:\trandomInt(1,10),\n\t\t    z\t:\t'',\n                    \"$\"     :   \"`\"\n            };\n\t    if(qNum['a']==qNum['b'])\n\t\t    qNum['b']+=1;\n\t    var g=gcd(qNum['a'],qNum['b']);\n\t    qNum['a']\/=g;\n\t    qNum['b']\/=g;\n\t    qNum['c']=randomInt(5,30);\n\t    qNum['a+b']=qNum['a']+qNum['b'];\n\t    qNum['p']=qNum['a+b']*qNum['c'];\n\t    qNum['ac']=qNum['a']*qNum['c'];\n\t    qNum['bc']=qNum['b']*qNum['c'];\n        qNum['question']='<p>Divide [p] into the ratio [$][a]:[b][$]<\/p>';\n        qNum['answer']='<p>[$][a]+[b]=[a+b][$]<\/p><br\/><\/p>[$][p]-:[a+b]=[c][$]<\/p><\/p>[$][a]xx[c]=[ac][$] and [$][b]xx[c]=[bc][$]<\/p><\/p><b>OR<\/b><\/p><\/p>[$][p]xx[a]\/[a+b]=[ac][$] and [$][p]xx[b]\/[a+b]=[bc][$]<\/p><br\/><\/p>Answer: [ac] and [bc]<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Numbers", "Rates", "Finding a Rate"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n\t    var lengths=['mm','cm','m','km'];\n\t    var weights=['mg','g','kg'];\n\t    var times=['sec','min','h','days','weeks','months','years'];\n            var qNum={\n\t\t    a\t:\trandomInt(2,100),\n\t\t    b\t:\trandomInt(2,100),\n                    \"$\"     :   \"`\"\n            };\n\t    var unitType1=randomInt(0,2);\n\t    var unitType2;\n\t    do{\n\t\tunitType2=randomInt(0,2);\n\t    }\n\t    while(unitType1==unitType2);\n\t    switch(unitType1)\n\t    {\n\t\tcase 0:\n\t\t\tqNum['unit1']=randomArrayElement(lengths);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tqNum['unit1']=randomArrayElement(weights);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tqNum['unit1']=randomArrayElement(times);\n\t\t\tbreak;\n\t    }\n\t    switch(unitType2)\n\t    {\n\t\tcase 0:\n\t\t\tqNum['unit2']=randomArrayElement(lengths);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tqNum['unit2']=randomArrayElement(weights);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tqNum['unit2']=randomArrayElement(times);\n\t\t\tbreak;\n\t    }\n\t    qNum['a\/b']=Math.round(qNum['a']\/qNum['b']*100)\/100;\n        qNum['question']='<p>What rate is [a][unit1] every [b][unit2]? <br \/>(give answer to 2dp)<\/p>';\n        qNum['answer']='<p>[$][a]-:[b]=[a\/b][$] (2dp)<\/p><p>so it is [a\/b] [unit1]\/[unit2]<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Numbers", "Rates", "Rate Problems"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n\t    var objects=['A car travels at a speed of','Water is flowing at a rate of','A tree grows at a rate of','The density of a substance is','Fruit at the super market costs'];\n\t    var will1=['How long will it take to travel','How long will it take to fill','How long will it take to grow','What volume will be occupied by','What weight of fruit will cost'];\n\t    var will2=['How far will it travel in', 'How many litres will flow in','How high will it grow in','What is the weight of', 'What is the cost of'];\n\t    var u1=['km','L','mm','kg','$'];\n\t    var u2=['h','s','day','m^3','kg'];\n\t    var s1=['','','','',''];\n\t    var s2=['','','s','',''];\n\t    var r1=[10 ,2 ,10 ,1,1];\n\t    var r2=[120,20,100,5,20];\n\t    var qType=randomInt(0,objects.length-1);\n\t    var uType=randomInt(0,1);\n            var qNum={\n\t\tr\t\t:\trandomInt(r1[qType],r2[qType]),\n\t\tp\t\t:\trandomInt(2,100),\n\t\tobject\t:\tobjects[qType],\n\t\tunit1\t:\tu1[qType],\n\t\tunit2\t:\tu2[qType],\n\t\tn\t\t:\t'',\n\t\t\"$\"     :   \"`\"\n            };\n\t    if(uType){\n\t\tqNum['will']=will1[qType];\n\t\tqNum['unit3']=u1[qType];\n\t\tqNum['unit4']=u2[qType];\n\t\tqNum['multdiv']='-:';\n\t\tqNum['q']=Math.round(qNum['p']\/qNum['r']*100)\/100;\n\t\tqNum['s']=s1[qType];\n\t\tqNum['ss']=s2[qType];\n\t    }\n\t    else{\n\t\tqNum['will']=will2[qType];\n\t\tqNum['unit3']=u2[qType];\n\t\tqNum['unit4']=u1[qType];\n\t\tqNum['multdiv']='xx';\n\t\tqNum['q']=Math.round(qNum['p']*qNum['r']*100)\/100;\n\t\tqNum['s']=s2[qType];\n\t\tqNum['ss']=s1[qType];\n\t    }\n\t    if(qNum['q']%1==0)\n\t\tqNum['q']+='.00';\n        qNum['question']='<p>[object] [r] [$][unit1][$]\/[$][unit2][$].[will] [p] [$][unit3][s][$]?<\/p><p>Give your answer as a decimal to 2 dp.<\/p>';\n        qNum['answer']='<p>Since we are finding an amount of [$][unit3][s][$], we [$][multdiv][$] by the rate.<\/p><p>[$][p][multdiv][r]=[q][unit4][ss][$] (2dp)<\/p>';                \n\t\t\t\n        "
    }, {
        "category": ["Numbers", "Rates", "Converting Rates"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n\t    var units=[ ['mm','m','km'], ['mg','g','kg'], ['ml','l'], ['s','min','h'],['\\\\text{inch}','ft']];\n\t    var scale=[1000,1000,1000,60,12];\n\t    var uType1=randomInt(0,units.length-1);\n\t    var uType2=randomInt(0,units.length-1);\n\t    while(uType1==uType2)\n\t\tuType2=randomInt(0,units.length-1);\n\t    var unit1=units[uType1];\n\t    var unit2=units[uType2];\n\t    var u1,u2,u3,u4;\n\t    do{\n\t\tu1=randomInt(0,unit1.length-1);\n\t\tu2=randomInt(0,unit2.length-1);\n\t\tu3=randomInt(0,unit1.length-1);\n\t\tu4=randomInt(0,unit2.length-1);\n\t    }\n\t    while(u1==u3 && u2==u4);\n\t    var qNum={\n\t\tr\t:\tnew Fraction(randomInt(10,100),1),\n\t\tunit1\t:\tunit1[u1],\n\t\tunit2\t:\tunit2[u2],\n\t\tunit3\t:\tunit1[u3],\n\t\tunit4\t:\tunit2[u4],\n\t\tifc1\t:\t'To convert from [$][unit1][$] to [$][unit3][$], we [$][multdivp][$] by [p]<\/p><\/p>[$][r][$] [$][unit1][$]\/[$][unit2]=[rp][$] [$][unit3][$]\/[$][unit2][$]',\n\t\tifc2\t:\t'To convert from [$][unit2][$] to [$][unit4][$], we [$][multdivq][$] by [q]<\/p><\/p>[$][rp][$] [$][unit3][$]\/[$][unit2]=[rq][$] [$][unit3][$]\/[$][unit4][$]',\n\t\t\"$\"     :   \"`\"\n\t    };\n\t\tif(u1>u3)\n\t\t    qNum['multdivp']='xx';\n\t\telse if(u1<u3)\n\t\t    qNum['multdivp']='-:';\n\t\telse\n\t\t    qNum['ifc1']='';\n\t\tif(u2<u4)\n\t\t    qNum['multdivq']='xx';\n\t\telse if(u2>u4)\n\t\t    qNum['multdivq']='-:';\n\t\telse\n\t\t    qNum['ifc2']='';\n\t\tqNum['p']=new Fraction(Math.pow(scale[uType1],u1-u3),1);\n\t\tqNum['q']=new Fraction(Math.pow(scale[uType2],u4-u2),1);\n\t\tqNum['rp']=qNum['r'].mult(qNum['p']).decimal();\n\t\tqNum['rq']=qNum['r'].mult(qNum['p']).mult(qNum['q']).decimal();\n\t\tqNum['p']=Math.pow(scale[uType1],Math.abs(u1-u3));\n\t\tqNum['q']=Math.pow(scale[uType2],Math.abs(u4-u2));\n        qNum['question']='<p>Convert the following rate:<\/p><p>[$][r][$] [$][unit1][$]\/[$][unit2][$]<\/p><p>into<\/p><p>[$][unit3][$]\/[$][unit4][$]<\/p>';\n        qNum['answer']='<p>[?ifc1]<\/p>';               \n\t\t\t\n        "
    }, {
        "category": ["Numbers", "Percentages", "Percentages of things"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n            var qNum={\n\t\tp\t:\trandomInt(1,99),\n\t\tq\t:\trandomInt(10,1000),\n\t\t\"$\"     :   \"`\"\n            };\n\t    qNum['dp']=qNum['p']\/100;\n\t    qNum['a']=qNum['q']*qNum['p']\/100;\n        qNum['question']='<p>Find [p]% of [q]<\/p>';\n        qNum['answer']='<p><b>Using Decimals:<\/b><\/p><p>[$][q]xx[dp]=[a][$]<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Numbers", "Percentages", "Percentage Increase\/Decrease"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n\tvar qNum={\n\t    p\t:\trandomInt(1,50),\n\t    q\t:\trandomInt(10,1000),\n\t    crease:\trandomArrayElement(['increase','decrease']),\n\t    \"$\"     :   \"`\"\n\t};\n\t    if(qNum['crease']=='increase'){\n\t\tqNum['lp']=qNum['p']+100;\n\t\tqNum['dp']=1+qNum['p']\/100;\n\t    }\n\t    else{\n\t\tqNum['lp']=100-qNum['p'];\n\t\tqNum['dp']=1-qNum['p']\/100;\n\t    }\n\t    qNum['a']=qNum['q']*qNum['lp']\/100;\n        qNum['question']='<p>[crease] [q] by [p]%<\/p>';\n        qNum['answer']='<p>In other words: Find [lp]% of [q]<\/p><p><b>Using Decimals:<\/b><\/p><p>[$][q]xx[dp]=[a][$]<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Numbers", "Surds", "Simplifying Surds"],
        "subject": ["UONPREP093"],
        "code": " \n\t  \n             var noSquareFactors=[2,3,5,6,7,10,11,13,14,15];\n             var qNum={\n               \"a\":\"\",\n               \"xx\":\"\",\n               \"so\":\"\",\n               \"sbx\":randomInt(2,10),\n               \"by\":randomArrayElement(noSquareFactors),\n               \"$\":\"`\"\n             };\n             qNum['bx']=qNum['sbx']*qNum['sbx'];\n             qNum['b']=qNum['bx']*qNum['by'];\n             if(randomInt(0,1)){\n                 qNum['a']=randomInt(2,15);\n                 qNum['xx']='xx';\n                 qNum['asbx']=qNum['a']*qNum['sbx'];\n                 qNum['so']='<p>so <br\/> [$][a] sqrt([b])=[a][xx] [sbx] sqrt([by])=[asbx] sqrt([by])[$]<\/p>'\n             }\n        qNum['question']='<p>Simplify the following surd<\/p><p>[$][a] sqrt([b])[$]<\/p>';\n        qNum['answer']='<p>[$]sqrt([b])=sqrt([bx]xx[by])=sqrt([bx])xx sqrt([by])=[sbx] sqrt([by])[$]<\/p>[?so]';             \n            \n        "
    }, {
        "category": ["Algebra", "Basics", "Like Terms"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \n            var qNum={\n                    simplify :   '[$]',\n                    answer1  :   '',\n                    answer2 :   '',\n                    \"$\"     :   \"`\"\n            };\n            var pronumeral=['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n            var noTerms=randomInt(2,6);\n            var noTypes=randomInt(1,noTerms-1);\n            var types = new Array(noTypes);\n            var termType= new Array(noTerms);\n            var coef=new Array(noTerms);\n            var countTypes=new Array(noTypes);\n            var totalTypes=new Array(noTypes);\n            var answerStrings=new Array(noTypes);\n            for(var i=0;i<noTypes;i++){\n                countTypes[i]=0;\n                totalTypes[i]=0;\n                answerStrings[i]='';\n                var noPr=randomInt(1,3);\n                var l1=randomInt(0,pronumeral.length-1);\n                var l2=randomInt(l1,pronumeral.length-1);\n                var l3=randomInt(l2,pronumeral.length-1);\n                types[i]=pronumeral[l1];\n                if(noPr==3 && l1==l2 && l2==l3)\n                    types[i]+='^3';\n                else if(noPr>1 && l1==l2){\n                    types[i]+='^2';\n                    types[i]+=' '+pronumeral[l3];\n                }\n                else if(noPr>1){\n                    types[i]+=' '+pronumeral[l2];\n                    if(noPr==3 && l2==l3)\n                        types[i]+='^2';\n                    else if(noPr==3)\n                        types[i]+=' '+pronumeral[l3];\n                }\n                if(i>0 && types[i]==types[i-1])\n                    i--;\n                else if(i>1 && types[i]==types[i-2])\n                    i--;\n                else if(i>2 && types[i]==types[i-3])\n                    i--;\n                else if(i>3 && types[i]==types[i-4])\n                    i--;\n            }\n            for(var i=0;i<noTerms;i++){\n                coef[i]=randomInt(1,9);\n                var c=coef[i];\n                if(coef[i]==1)\n                    c='';\n                if(randomInt(0,1)){\n                    if(i)\n                        c='+'+c;\n                }\n                else{\n                    c='-'+c;\n                    coef[i]*=-1;\n                }\n                var thisType=randomInt(0,types.length-1);\n                termType[i]=thisType;\n                qNum['simplify']+=' '+c+types[thisType];\n            }\n            qNum['simplify']+='[$]';\n\n            for(var i=0;i<noTerms;i++){\n                countTypes[termType[i]]+=1;\n                totalTypes[termType[i]]+=coef[i];\n                if(answerStrings[termType[i]]=='' || coef[i]<0)\n                    answerStrings[termType[i]]+=coef[i];\n                else\n                    answerStrings[termType[i]]+='+ '+coef[i];\n            }\n            for(var i=0;i<noTypes;i++){\n                if(countTypes[i]>1){\n                    var t=totalTypes[i];\n                    if(t==1)\n                        t='';\n                    else if(t==-1)\n                        t='-';\n                    qNum['answer1']+='There are '+countTypes[i]+' of the [$]'+types[i]+'[$] terms.<br\/> Since [$]'+answerStrings[i]+'='+totalTypes[i]+'[$], these terms become [$]'+t+types[i];\n                    if(totalTypes[i]==0){\n                        qNum['answer1']+='=0';\n                    }\n                    qNum['answer1']+='[$].<\/p>';\n                }\n            }\n            qNum['answer1']+='<\/p>So the answer is:<br\/>[$]';\n            for(var i=0;i<noTypes;i++){\n                var t=totalTypes[i];\n                    if(t==1)\n                        t='';\n                    else if(t==-1)\n                        t='-';\n                if(totalTypes[i]>0 && qNum['answer2']!='')\n                    qNum['answer2']+='+'+t+types[i];\n                else if(totalTypes[i]!=0)\n                    qNum['answer2']+=t+types[i];\n            }\n            if(qNum['answer2']=='')\n                qNum['answer2']='0';\n            qNum['answer2']+='[$]';\n        qNum['question']='<p>Simplify the following expression:<\/p><p>[?simplify]<\/p>';\n        qNum['answer']='<p>[?answer1][?answer2]<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Algebra", "Basics", "Evaluating an Algebraic Expression"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \nvar a=new Fraction(randomInt(-9,9),1);\nvar b=new Fraction(randomInt(-9,9),1);\nvar c=new Fraction(randomInt(-9,9),1);\nvar qNum={\n\t\t\"a\"     :   a.string(),\n\t\t\"b\"     :   b.string(),\n\t\t\"c\"     :   c.string(),\n\t\t\"t\"     :   '',\n\t\t\"expr\"  :   '',\n\t\t\"aexpr1\":   '',\n\t\t\"aexpr2\":   '',\n\t\t\"ans\"   :   '',\n\t\t\"$\"     :   \"`\"\n};\nswitch(randomInt(0,15)){\n\tcase 0:\n\t\tqNum['expr']='ab+c';\n\t\tqNum['aexpr1']='[a]xx[b]+ [c]';\n\t\tqNum['aexpr2']='[t]+ [c]';\n\t\tqNum['t']=a.mult(b).string();\n\t\tqNum['ans']=a.mult(b).add(c).string();\n\t\tbreak;\n\tcase 1:\n\t\tqNum['expr']='ab-c';\n\t\tqNum['aexpr1']='[a]xx[b]- [c]';\n\t\tqNum['aexpr2']='[t]- [c]';\n\t\tqNum['t']=a.mult(b).string();\n\t\tqNum['ans']=a.mult(b).sub(c).string();\n\t\tbreak;\n\tcase 2:\n\t\tqNum['expr']='a+bc';\n\t\tqNum['aexpr1']='[a]+ [b]xx[c]';\n\t\tqNum['aexpr2']='[a]+ [t]';\n\t\tqNum['t']=b.mult(c).string();\n\t\tqNum['ans']=b.mult(c).add(a).string();\n\t\tbreak;\n\tcase 3:\n\t\tqNum['expr']='a-bc';\n\t\tqNum['aexpr1']='[a]- [b]xx[c]';\n\t\tqNum['aexpr2']='[a]- [t]';\n\t\tqNum['t']=b.mult(c).string();\n\t\tvar temp = b.mult(c);\n\t\tqNum['ans']=a.sub(temp).string();\n\t\tbreak;\n\tcase 4:\n\t\tqNum['expr']='a\/b+c';\n\t\tif(b.numerator==0){\n\t\t\tb=new Fraction(nonZeroRand(-9,9),1);\n\t\t\tqNum['b']=b.string();\n\t\t}\n\t\tqNum['aexpr1']='[a]-:[b]+ [c]';\n\t\tqNum['aexpr2']='[t]+ [c]';\n\t\tqNum['t']=a.div(b).string();\n\t\tqNum['ans']=a.div(b).add(c).string();\n\t\tbreak;\n\tcase 5:\n\t\tqNum['expr']='a\/b-c';\n\t\tif(b.numerator==0){\n\t\t\tb=new Fraction(nonZeroRand(-9,9),1);\n\t\t\tqNum['b']=b.string();\n\t\t}\n\t\tqNum['aexpr1']='[a]-:[b]- [c]';\n\t\tqNum['aexpr2']='[t]- [c]';\n\t\tqNum['t']=a.div(b).string();\n\t\tqNum['ans']=a.div(b).sub(c).string();\n\t\tbreak;\n\tcase 6:\n\t\tqNum['expr']='a+b\/c';\n\t\tif(c.numerator==0){\n\t\t\tc=new Fraction(nonZeroRand(-9,9),1);\n\t\t\tqNum['c']=c.string();\n\t\t}\n\t\tqNum['aexpr1']='[a]+ [b]-:[c]';\n\t\tqNum['aexpr2']='[a]+ [t]';\n\t\tqNum['t']=b.div(c).string();\n\t\tqNum['ans']=b.div(c).add(a).string();\n\t\tbreak;\n\tcase 7:\n\t\tqNum['expr']='a-b\/c';\n\t\tif(c.numerator==0){\n\t\t\tc=new Fraction(nonZeroRand(-9,9),1);\n\t\t\tqNum['c']=c.string();\n\t\t}\n\t\tqNum['aexpr1']='[a]- [b]-:[c]';\n\t\tqNum['aexpr2']='[a]+ [t]';\n\t\tqNum['t']=b.div(c).string();\n\t\tvar temp=b.div(c);\n\t\tqNum['ans']=a.sub(temp).string();\n\t\tbreak;\n\tcase 8:\n\t\tqNum['expr']='(a+b)c';\n\t\tqNum['aexpr1']='([a]+ [b])xx[c]';\n\t\tqNum['aexpr2']='[t]xx[c]';\n\t\tqNum['t']=a.add(b).string();\n\t\tqNum['ans']=a.add(b).mult(c).string();\n\t\tbreak;\n\tcase 9:\n\t\tqNum['expr']='(a-b)c';\n\t\tqNum['aexpr1']='([a]- [b])xx[c]';\n\t\tqNum['aexpr2']='[t]xx[c]';\n\t\tqNum['t']=a.sub(b).string();\n\t\tqNum['ans']=a.sub(b).mult(c).string();\n\t\tbreak;\n\tcase 10:\n\t\tqNum['expr']='a(b+c)';\n\t\tqNum['aexpr1']='[a]xx([b]+ [c])';\n\t\tqNum['aexpr2']='[a]xx[t]';\n\t\tqNum['t']=b.add(c).string();\n\t\tqNum['ans']=b.add(c).mult(a).string();\n\t\tbreak;\n\tcase 11:\n\t\tqNum['expr']='a(b-c)';\n\t\tqNum['aexpr1']='[a]xx([b]- [c])';\n\t\tqNum['aexpr2']='[a]xx[t]';\n\t\tqNum['t']=b.sub(c).string();\n\t\tqNum['ans']=b.sub(c).mult(a).string();\n\t\tbreak;\n\tcase 12:\n\t\tqNum['expr']='(a+b)\/c';\n\t\tif(c.numerator==0){\n\t\t\tc=new Fraction(nonZeroRand(-9,9),1);\n\t\t\tqNum['c']=c.string();\n\t\t}\n\t\tqNum['aexpr1']='([a]+ [b])-:[c]';\n\t\tqNum['aexpr2']='[t]-:[c]';\n\t\tqNum['t']=a.add(b).string();\n\t\tqNum['ans']=a.add(b).div(c).string();\n\t\tbreak;\n\tcase 13:\n\t\tqNum['expr']='(a-b)\/c';\n\t\tif(c.numerator==0){\n\t\t\tc=new Fraction(nonZeroRand(-9,9),1);\n\t\t\tqNum['c']=c.string();\n\t\t}\n\t\tqNum['aexpr1']='([a]- [b])-:[c]';\n\t\tqNum['aexpr2']='[t]-:[c]';\n\t\tqNum['t']=a.sub(b).string();\n\t\tqNum['ans']=a.sub(b).div(c).string();\n\t\tbreak;\n\tcase 14:\n\t\tqNum['expr']='a\/(b+c)';\n\t\twhile(b.add(c).numerator==0){\n\t\t\tb=new Fraction(randomInt(-9,9),1);\n\t\t\tqNum['b']=b.string();\n\t\t}\n\t\tqNum['aexpr1']='[a]-:([b]+ [c])';\n\t\tqNum['aexpr2']='[a]-:[t]';\n\t\tqNum['t']=b.add(c).string();\n\t\tvar temp=b.add(c);\n\t\tqNum['ans']=a.div(temp).string();\n\t\tbreak;\n\tcase 15:\n\t\tqNum['expr']='a\/(b-c)';\n\t\twhile(b.sub(c).numerator==0){\n\t\t\tb=new Fraction(randomInt(-9,9),1);\n\t\t\tqNum['b']=b.string();\n\t\t}\n\t\tqNum['aexpr1']='[a]-:([b]- [c])';\n\t\tqNum['aexpr2']='[a]-:[t]';\n\t\tqNum['t']=b.sub(c).string();\n\t\tvar temp=b.sub(c);\n\t\tqNum['ans']=a.div(temp).string();\n\t\tbreak;\n}\n        qNum['question']='<p>Evaluate the following expression:<\/p><p>[$][expr][$]<\/p><p>Given that:<\/p><p>[$]a=[a], b=[b], c=[c].[$]<\/p>';\n        qNum['answer']='<p>[$]=[?aexpr1][$]<\/p><p>[$]=[?aexpr2][$]<\/p><p>[$]=[ans][$]<\/p>';\n\t\t\n        "
    }, {
        "category": ["Algebra", "Expanding Brackets", "Single Brackets"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \n            var pronumeral=['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n            var al=new Array(6);\n            var syms =[randomLowInt(0,2),randomLowInt(0,2),randomLowInt(0,2)]\n            if(syms[1]==syms[2])\n                syms[1]++;\n            for(var i=0;i<3;i++){\n                al[i]=new algebra();\n                al[i].coef[0]=new Fraction(randomInt(1,9),1);\n                al[i].terms[0]=new term();\n                for(var j=0;j<syms[i];j++){\n                    var ind=new Fraction(randomLowInt(1,5),1);\n                    al[i].terms[0].addSymbol(randomArrayElement(pronumeral),ind);\n                }\n            }\n            al[3]=al[1].add(al[2]);\n            al[4]=al[0].mult(al[1]);\n            al[5]=al[0].mult(al[2]);\n            var qNum={\n                    \"a\"     :   al[0].string(),\n                    \"b\"     :   al[1].string(),\n                    \"c\"     :   al[2].string(),\n                    \"+\"     :   randomArrayElement(['+','-']),\n                    \"bc\"    :   al[3].string(),\n                    \"ab\"    :   al[4].string(),\n                    \"ac\"    :   al[5].string(),\n                    \"abpac\" :   al[4].add(al[5]).string(),\n                    \"$\"     :   \"`\"\n            };\n            if(qNum['+']=='-'){\n                qNum['bc']= al[1].sub(al[2]).string();\n                qNum['abpac']=al[4].sub(al[5]).string();\n            }\n        qNum['question']='<p>Expand the brackets:<\/p><p>[$][a]([bc])[$]<\/p>';\n        qNum['answer']='<p>[$][a]xx[b]=[ab][$]<\/p><p>[$][a]xx[c]=[ac][$]<\/p><p>So the answer is:<\/p><p>[$][abpac][$]<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Algebra", "Expanding Brackets", "Two Brackets"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \n            var pronumeral=['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n            var al=new Array(11);\n            var syms =[randomLowInt(0,2),randomLowInt(0,2),randomLowInt(0,2),randomLowInt(0,2)];\n            if(syms[0]==syms[1])\n                syms[1]++;\n            if(syms[2]==syms[3])\n                syms[3]++;\n            for(var i=0;i<4;i++){\n                al[i]=new algebra();\n                if(i==1 || i==3)\n                    al[i].coef[0]=new Fraction(nonZeroRand(-9,9),1);\n                else\n                    al[i].coef[0]=new Fraction(randomInt(1,9),1);\n                al[i].terms[0]=new term();\n                for(var j=0;j<syms[i];j++){\n                    var ind=new Fraction(randomLowInt(1,5),1);\n                    al[i].terms[0].addSymbol(randomArrayElement(pronumeral),ind);\n                }\n            }\n            al[4]=al[0].mult(al[2]);\n            al[5]=al[0].mult(al[3]);\n            al[6]=al[1].mult(al[2]);\n            al[7]=al[1].mult(al[3]);\n            al[8]=al[4].add(al[5]).add(al[6]).add(al[7]);\n            al[9]=al[0].add(al[1]);\n            al[10]=al[2].add(al[3]);\n            var qNum={\n                    \"a\"     :   al[0].string(),\n                    \"b\"     :   al[1].string(),\n                    \"c\"     :   al[2].string(),\n                    \"d\"     :   al[3].string(),\n                    \"ac\"    :   al[4].string(),\n                    \"ad\"    :   al[5].string(),\n                    \"bc\"    :   al[6].string(),\n                    \"bd\"    :   al[7].string(),\n                    \"all\"   :   al[8].string(),\n                    \"ab\"    :   al[9].string(),\n                    \"cd\"    :   al[10].string(),\n                    \"$\"     :   \"`\"\n            };\n        qNum['question']='<p>Expand the brackets:<\/p><p>[$]([ab])([cd])[$]<\/p>';\n        qNum['answer']='<p>[$][a]xx[c]=[ac][$]  and  [$][a]xx[d]=[ad][$]<\/p><p>[$][b]xx[c]=[bc][$]  and  [$][b]xx[d]=[bd][$]<\/p><p>So the answer is:<\/p><p>[$][all][$]<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Algebra", "Expanding Brackets", "Perfect Squares"],
        "subject": ["UONPREP093"],
        "code": " \n\t\n var pronumeral = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n var al1=new algebra(), al2=new algebra();\n    al1.coef[0] = new Fraction(randomInt(1, 9), 1);\n    al2.coef[0] = new Fraction(nonZeroRand(-9, 9), 1);\n    var syms = [randomLowInt(0, 2), randomLowInt(0, 2)];\n    if(syms[0]==syms[1] && syms[1]==0)\n        syms[1]=1;\n    al1.terms[0] = new term();\n    al2.terms[0] = new term();\n    var i=0,j=0;\n    while(i++<syms[0]){\n        var ind = new Fraction(randomLowInt(1, 5), 1);\n        al1.terms[0].addSymbol(randomArrayElement(pronumeral), ind);\n    }\n    while(j++<syms[1]){\n        var ind = new Fraction(randomLowInt(1, 5), 1);\n            al2.terms[0].addSymbol(randomArrayElement(pronumeral), ind);\n    }\n    var al3=al1.mult(al1), al4=al1.mult(al2), al5=al2.mult(al2);\n    var qNum={\n        \"a\": al1.string(),\n        \"b\": al2.string(),\n        \"ab\": al1.add(al2).string(),\n        \"aa\": al3.string(),\n        \"axb\": al4.string(),\n        \"2axb\": al4.add(al4).string(),\n        \"bb\": al5.string(),\n        \"aapab\":al3.add(al4).string(),\n        \"abpbb\":al4.add(al5).string(),\n        \"all\": al3.add(al4).add(al4).add(al5).string(),\n        \"pm\":'+',\n        \"$\": \"`\"\n    };\n    if(al4.coef[0].negative)\n        qNum['pm']='';\n        qNum['question']='<p>Expand the brackets:<\/p><p>[$]([ab])^2[$]<\/p>';\n        qNum['answer']='<div style=\"float: left\"><p>[$]([ab])^2=([ab])([ab])[$]<\/p><p>now expand brackets for [$]([ab])([ab])[$]<\/p><p>[$][a]xx[a]=[aa][$]  and  [$][a]xx[b]=[axb][$]  and  [$][b]xx[b]=[bb][$]<\/p><p>So the answer is:<\/p><p>[$][aapab][pm][abpbb]=[all][$]<\/p><\/div><div style=\"border: thin solid; float: left; padding-left: 1em; margin-left: 1em;\"><p><b>Alternatively<\/b> using the pattern of perfect squares:<\/p><p>[$](a+b)^2=a^2+2ab+b^2[$]<\/p><p>[$][a]xx[a]=[aa][$]  and  [$]2xx[a]xx[b]=[2axb][$]  and  [$][b]xx[b]=[bb][$]<\/p><p>So the answer is: [$][all][$]<\/p><\/div>';"
    }, {
        "category": ["Algebra", "Expanding Brackets", "Difference of Squares"],
        "subject": ["UONPREP093"],
        "code": " \n\t  \n    var pronumeral = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    var nOne=new algebra();\n    nOne.coef[0]=new Fraction(-1,1);\n    nOne.terms[0]=new term();\n    var al1=new algebra(), al2=new algebra();\n    al1.coef[0] = new Fraction(randomInt(1, 9), 1);\n    al2.coef[0] = new Fraction(nonZeroRand(-9, 9), 1);\n    var syms = [randomLowInt(0, 2), randomLowInt(0, 2)];\n    if(syms[0]==syms[1] && syms[1]==0)\n        syms[1]=1;\n    al1.terms[0] = new term();\n    al2.terms[0] = new term();\n    var i=0,j=0;\n    while(i++<syms[0]){\n        var ind = new Fraction(randomLowInt(1, 5), 1);\n            al1.terms[0].addSymbol(randomArrayElement(pronumeral), ind);\n    }\n    while(j++<syms[1]){\n        var ind = new Fraction(randomLowInt(1, 5), 1);\n            al2.terms[0].addSymbol(randomArrayElement(pronumeral), ind);\n    }\n    var al3=al2.mult(nOne), al4=al1.mult(al3).add(al2.mult(al2));\n    var qNum={\n        \"a\": al1.string(),\n        \"b\": al2.string(),\n        \"apb\": al1.add(al2).string(),\n        \"amb\": al1.sub(al2).string(),\n        \"mb\":al3.string(),\n        \"aa\": al1.mult(al1).string(),\n        \"bb\": al2.mult(al2).string(),\n        \"axmb\": al1.mult(al3).string(),\n        \"axb\":al1.mult(al2).string(),\n        \"aapab\": al1.mult(al1).add(al1.mult(al2)).string(),\n        \"abpbb\":al4.string(),\n        \"all\": al1.mult(al1).sub(al2.mult(al2)).string(),\n        \"pm\":'+',\n        \"$\": \"`\"\n    };\n    if(al4.coef[0].negative)\n        qNum['pm']='';qNum['question']='<p>Expand the brackets:<\/p><p>[$]([apb])([amb])[$]<\/p>';qNum['answer']='<div style=\"float: left\"><p>[$][a]xx[a]=[aa][$]  and  [$][a]xx[mb]=[axmb][$]<\/p><p>[$][b]xx[a]=[axb][$]  and  [$][b]xx[b]=[bb][$]<\/p><p>So the answer is:<\/p><p>[$][aapab][pm][abpbb]=[all][$]<\/p><\/div><div style=\"border: thin solid; float: left; padding-left: 1em; margin-left: 1em;\"><p><b>Alternatively<\/b> using the pattern of \"difference of squares\":<\/p><p>[$](a+b)(a-b)=a^2-b^2[$]<\/p><p>[$][a]xx[a]=[aa][$]  and  [$][b]xx[b]=[bb][$]<\/p><p>So the answer is: [$][all][$]<\/p><\/div>';"
    }, {
        "category": ["Algebra", "Factorisation", "Common Factor"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \n            var pronumeral=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n            var al=new Array(7);\n            var syms =[randomLowInt(0,2),randomLowInt(0,2),randomLowInt(0,2)]\n            if(syms[1]==syms[2])\n                syms[1]++;\n            for(var i=0;i<3;i++){\n                al[i]=new algebra();\n                if(i==0)\n                    al[i].coef[0]=new Fraction(randomInt(2,9),1);\n                else if(i==2)\n                    al[i].coef[0]=new Fraction(nonZeroRand(-9,9),1);\n                else\n                    al[i].coef[0]=new Fraction(randomInt(1,9),1);\n                al[i].terms[0]=new term();\n                for(var j=0;j<syms[i];j++){\n                    var ind=new Fraction(randomLowInt(1,5),1);\n                    al[i].terms[0].addSymbol(randomArrayElement(pronumeral),ind);\n                }\n            }\n\t    var g=gcd(al[1].coef[0].numerator,al[2].coef[0].numerator);\n\t    if(g!=1&&g!=-1){\n\t\tal[1].coef[0]=al[1].coef[0].div(new Fraction(g,1));\n\t\tal[2].coef[0]=al[2].coef[0].div(new Fraction(g,1));\n\t    }\n            al[3]=al[1].add(al[2]);\n            al[4]=al[0].mult(al[1]);\n            al[5]=al[0].mult(al[2]);\n            al[6]=al[4].add(al[5]);\n            var qNum={\n                    \"a\"     :   al[0].string(),\n                    \"b\"     :   al[1].string(),\n                    \"c\"     :   al[2].string(),\n                    \"bc\"    :   al[3].string(),\n                    \"ab\"    :   al[4].string(),\n                    \"ac\"    :   al[5].string(),\n                    \"abpac\" :   al[6].string(),\n                    \"$\"     :   \"`\"\n            };\n        qNum['question']='<p>Factorise the following:<\/p><p>[$][abpac][$]<\/p>';\n        qNum['answer']='<p>The common factor is [$][a][$]<\/p><p>[$][a]xx[b]=[ab][$]  and  [$][a]xx[c]=[ac][$]<\/p><p>So the answer is:<\/p><p>[$][a]([bc])[$]<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Algebra", "Factorisation", "Monic Quadratics"],
        "subject": ["UONPREP093"],
        "code": "var p=nonZeroRand(-12,12),q=nonZeroRand(-12,12);\n    while(p+q==0)\n        q=nonZeroRand(-12,12);\n    var qNum={\n        \"p\":p,\n        \"q\":q,\n        \"b\":p+q,\n        \"c\":p*q,\n        \"questn\":'[$]x^2 [+!b]x [+c][$]',\n      \"$\":\"`\"  \n    };qNum['question']='<p>Factorise the following:<\/p><p>[?questn]<\/p>';qNum['answer']='<p>Find two numbers that add to give [$][b][$] and multiply to give [$][c][$]<\/p><p>[$][p][+q]=[b][$]<\/p><p>[$][p]xx[q]=[c][$]<\/p><p>Hence the solution is [$](x[+p])(x[+q])[$]<\/p>';"
    }, {
        "category": ["Algebra", "Factorisation", "Non-Monic Quadratics"],
        "subject": ["UONPREP093"],
        "code": " \n\t  \n    var cfs = [randomLowInt(2, 12), randomLowInt(1, 12), randomLowInt(1, 12), randomLowInt(1, 12)];\n    for (var i = 0; i < 4; i++)\n        cfs[i] *= nonZeroRand(-1, 1);\n    for (var i = 0; i < 2; i++) {\n        var g = gcd(cfs[i * 2], cfs[i * 2 + 1]);\n        if (g != 1) {\n            cfs[i * 2] \/= g;\n            cfs[i * 2 + 1] \/= g;\n        }\n    }\n    if (Math.abs(cfs[0]) == 1)\n        cfs[0] *= 5;\n    if (cfs[0] * cfs[3] + cfs[1] * cfs[2] == 0) {\n        do\n            cfs[0] = randomInt(-9, 9);\n        while (cfs[0] != cfs[2] && gcd(cfs[0], cfs[1]) != 1)\n    }\n    var qNum={\n        \"p\": cfs[0] * cfs[3],\n        \"q\": cfs[1] * cfs[2],\n        \"a\": cfs[0] * cfs[2],\n        \"b\": cfs[0] * cfs[3] + cfs[1] * cfs[2],\n        \"c\": cfs[1] * cfs[3],\n        \"d\": cfs[0] * cfs[1] * cfs[2] * cfs[3],\n        \"a0\": cfs[0],\n        \"a1\": cfs[1],\n        \"a2\": cfs[2],\n        \"a3\": cfs[3],\n        \"$\": \"`\"\n    };\n        qNum['question']='<p>Factorise the following:<\/p><p>[$][!a]x^2 [+!b]x [+c][$]<\/p>';\n        qNum['answer']='<p>First, noting that [$][a]xx[c]=[d][$],<\/p><p>Find two numbers that add to give [$][b][$] and multiply to give [$][d][$]<\/p><p>[$][p][+q]=[b][$]<\/p><p>[$][p]xx[q]=[d][$]<\/p><p>Re-write question as \"Factorise [$][!a]x^2 [+!p]x [+!q]x [+c][$]\"<\/p><p>[$][!a0]([!a2]x [+a3]) [+!a1]([!a2]x [+a3])[$]<\/p><p>[$]([!a2]x [+a3])([!a0]x [+a1])[$]<\/p>';    \n            \n        "
    }, {
        "category": ["Algebra", "Factorisation", "Perfect Squares"],
        "subject": ["UONPREP093"],
        "code": " \n\t  \n    var pronumeral=['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n    var alg=new Array();\n    var syms=[randomLowInt(0,2),randomLowInt(0,2)];\n    if(syms[0]==syms[1] && syms[1]==0)\n        syms[1]=1;\n    for(var i=0;i<2;i++){\n        alg[i]=new algebra();\n        if(i)\n            alg[i].coef[0]=new Fraction(nonZeroRand(-9,9),1);\n        else\n            alg[i].coef[0]=new Fraction(nonZeroRand(1,9),1);\n        alg[i].terms[0]=new term();\n        for(var j=0;j<syms[i];j++)\n            alg[i].terms[0].addSymbol(randomArrayElement(pronumeral),new Fraction(randomLowInt(1,2)));\n    }\n    alg[2]=alg[0].mult(alg[0]);\n    alg[3]=alg[1].mult(alg[1]);\n    alg[4]=alg[0].mult(alg[1]);\n    var notSquare=true;\n    if(randomInt(0,1)){\n        \/\/not a perfect square\n        alg[4].coef[0]=new Fraction(randomInt(-99,99),1);\n    }\n    else{\n        \/\/IS a perfect sqare\n        alg[4]=alg[4].add(alg[4]);\n        notSquare=false;\n    }\n    alg[5]=alg[2].add(alg[4]).add(alg[3]);\n    var qNum={\n        \"a\":alg[0].string(),\n        \"b\":alg[1].string(),\n        \"mb\":alg[1].mult(-1).string(),\n        \"aa\":alg[2].string(),\n        \"bb\":alg[3].string(),\n        \"nab\":alg[4].string(),\n        \"apb\":alg[0].add(alg[1]).string(),\n        \"exp\":alg[5].string(),\n        \"ifsquare\":'<p>Therefore [$][exp]=([apb])^2[$]<\/p>',\n        \"is\":'is',\n        \"$\"     :   \"`\"\n    };\n    if(notSquare){\n        qNum['ifsquare']='';\n        qNum['is']='is not';\n    }\n        qNum['question']='<p>Determine if [$][exp][$] is a perfect square.<\/p><p>If it is a perfect square, then factorise it (do not factorise it otherwise).<\/p>';\n        qNum['answer']='<p>[$][aa][$] is the square of [$][a][$]<\/p><p>[$][bb][$] is the square of [$][b][$]  or  [$][mb][$]<\/p><p>[$][nab][$] [is] equal to [$]2xx[a]xx[b][$], hence [$][exp][$] [is] a perfect square.<\/p>[?ifsquare]';    \n            \n        "
    }, {
        "category": ["Algebra", "Factorisation", "Difference of Squares"],
        "subject": ["UONPREP093"],
        "code": " \n\t  \n    var pronumeral=['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n    var alg=new Array();\n    var syms=[randomLowInt(0,2),randomLowInt(0,2)];\n    if(syms[0]==syms[1] && syms[1]==0)\n        syms[1]=1;\n    for(var i=0;i<2;i++){\n        alg[i]=new algebra();\n            alg[i].coef[0]=new Fraction(nonZeroRand(1,9),1);\n        alg[i].terms[0]=new term();\n        for(var j=0;j<syms[i];j++)\n            alg[i].terms[0].addSymbol(randomArrayElement(pronumeral),new Fraction(randomLowInt(1,2)));\n    }\n    alg[2]=alg[0].mult(alg[0]);\n    alg[3]=alg[1].mult(alg[1]);\n    var qNum={\n        \"a\":alg[0].string(),\n        \"b\":alg[1].string(),\n        \"aa\":alg[2].string(),\n        \"bb\":alg[3].string(),        \n        \"apb\":alg[0].add(alg[1]).string(),\n        \"amb\":alg[0].sub(alg[1]).string(),\n        \"exp\":alg[2].sub(alg[3]).string(),\n        \"$\"     :   \"`\"\n    };\n        qNum['question']='<p>Factorise the following expression<\/p><p>[$][exp][$]<\/p>';\n        qNum['answer']='<p>[$][aa][$] is the square of [$][a][$]<\/p><p>[$][bb][$] is the square of [$][b][$]<\/p><p>Hence [$][exp]=([apb])([amb])[$]<\/p>';    \n            \n        "
    }, {
        "category": ["Algebra", "Equations", "Equations 1"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \nvar pronumeral=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\nvar x=new term();\nvar one=new Fraction(1,1);\nvar negOne=new Fraction(-1,1);\nx.addSymbol(randomArrayElement(pronumeral),one);\nvar a=new Array();\nfor(var i=0;i<4;i++){\n\ta[i]=new algebra();\n\tif(i==0){\n\t\ta[i].terms[0]=x;\n\t\ta[i].coef[0]=one;\n\t}\n\telse{\n\t\ta[i].coef[0]=new Fraction(nonZeroRand(-9,9),1);\n\t\ta[i].terms[0]=new term();\n\t}\n}\nvar qNum={\n\t\t\"$\"     :   \"`\"\n};\nswitch(randomInt(0,5)){\n\tcase 0:\n\t\twhile(a[1].coef[0].numerator==1)\n\t\t\ta[1].coef[0]=new Fraction(nonZeroRand(-9,9),1);\n\t\tqNum['equ']=a[0].mult(a[1]).add(a[2]).string()+'='+a[3].string();\n\t\tif(a[2].coef[0].numerator>0)\n\t\t\tqNum['first']='subtract '+a[2].string()+' from both sides';\n\t\telse\n\t\t\tqNum['first']='add '+Math.abs(a[2].coef[0].numerator)+' to both sides';\n\t\tqNum['result1']=a[0].mult(a[1]).string()+'='+a[3].sub(a[2]).string();\n\t\tqNum['second']='divide both sides by '+a[1].string();\n\t\tqNum['result2']=a[0].string()+'='+a[3].coef[0].sub(a[2].coef[0]).div(a[1].coef[0]).string();\n\t\tbreak;\n\tcase 1:\n\t\twhile(a[1].coef[0].numerator==1)\n\t\t\ta[1].coef[0]=new Fraction(nonZeroRand(-9,9),1);\n\t\ta[2].coef[0]=new Fraction(randomInt(1,9),1);\n\t\tqNum['equ']=a[2].add(a[0].mult(a[1])).string()+'='+a[3].string();\n\t\tif(a[2].coef[0].numerator>0)\n\t\t\tqNum['first']='subtract '+a[2].string()+' from both sides';\n\t\telse\n\t\t\tqNum['first']='add '+Math.abs(a[2].coef[0].numerator)+' to both sides';\n\t\tqNum['result1']=a[0].mult(a[1]).string()+'='+a[3].sub(a[2]).string();\n\t\tqNum['second']='divide both sides by '+a[1].string();\n\t\tqNum['result2']=a[0].string()+'='+a[3].coef[0].sub(a[2].coef[0]).div(a[1].coef[0]).string();\n\t\tbreak;\n\tcase 2:\n\t\ta[1].coef[0]=new Fraction(randomInt(2,9),1);\n\t\tqNum['equ']=a[0].div(a[1]).add(a[2]).string()+'='+a[3].string();\n\t\tif(a[2].coef[0].numerator>0)\n\t\t\tqNum['first']='subtract '+a[2].string()+' from both sides';\n\t\telse\n\t\t\tqNum['first']='add '+Math.abs(a[2].coef[0].numerator)+' to both sides';\n\t\tqNum['result1']=a[0].div(a[1]).string()+'='+a[3].sub(a[2]).string();\n\t\tqNum['second']='multiply both sides by '+a[1].string();\n\t\tqNum['result2']=a[0].string()+'='+a[3].sub(a[2]).mult(a[1]).string();\n\t\tbreak;\n\tcase 3:\n\t\ta[1].coef[0]=new Fraction(randomInt(2,9),1);\n\t\ta[2].coef[0]=new Fraction(randomInt(1,9),1);\n\t\tqNum['equ']=a[2].add(a[0].div(a[1])).string()+'='+a[3].string();\n\t\tif(a[2].coef[0].numerator>0)\n\t\t\tqNum['first']='subtract '+a[2].string()+' from both sides';\n\t\telse\n\t\t\tqNum['first']='add '+Math.abs(a[2].coef[0].numerator)+' to both sides';\n\t\tqNum['result1']=a[0].div(a[1]).string()+'='+a[3].sub(a[2]).string();\n\t\tqNum['second']='multiply both sides by '+a[1].string();\n\t\tqNum['result2']=a[0].string()+'='+a[3].sub(a[2]).mult(a[1]).string();\n\t\tbreak;\n\tcase 4:\n\t\ta[2].coef[0]=new Fraction(randomInt(2,9),1);\n\t\tqNum['equ']=a[0].add(a[1]).div(a[2]).string()+'='+a[3].string();\n\t\tif(a[1].coef[0].numerator>0)\n\t\t\tqNum['second']='subtract '+a[1].string()+' from both sides';\n\t\telse\n\t\t\tqNum['second']='add '+Math.abs(a[1].coef[0].numerator)+' to both sides';\n\t\tqNum['result1']=a[0].add(a[1]).string()+'='+a[3].mult(a[2]).string();\n\t\tqNum['first']='multiply both sides by '+a[2].string();\n\t\tqNum['result2']=a[0].string()+'='+a[3].mult(a[2]).sub(a[1]).string();\n\t\tbreak;\n\tcase 5:\n\t\ta[1].coef[0]=new Fraction(randomInt(1,9),1);\n\t\ta[2].coef[0]=new Fraction(randomInt(2,9),1);\n\t\tqNum['equ']=a[1].add(a[0]).div(a[2]).string()+'='+a[3].string();\n\t\tif(a[1].coef[0].numerator>0)\n\t\t\tqNum['second']='subtract '+a[1].string()+' from both sides';\n\t\telse\n\t\t\tqNum['second']='add '+Math.abs(a[1].coef[0].numerator)+' to both sides';\n\t\tqNum['result1']=a[1].add(a[0]).string()+'='+a[3].mult(a[2]).string();\n\t\tqNum['first']='multiply both sides by '+a[2].string();\n\t\tqNum['result2']=a[0].string()+'='+a[3].mult(a[2]).sub(a[1]).string();\n\t\tbreak;\n}\n        qNum['question']='<p>Solve the following equation:<\/p><p>[$][equ][$]<\/p>';\n        qNum['answer']='<p>First we [first]<\/p><p>[$][result1][$]<\/p><p>then we [second]<\/p><p>[$][result2][$]<\/p>';\n\t\t\t\n        "
    }, {
        "category": ["Algebra", "Equations", "Equations 2"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \nvar pronumeral=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','p','q','r','s','t','u','v','w','x','y','z'];\nvar x=new term();\nvar one=new Fraction(1,1);\nvar negOneF=new Fraction(-1,1);\nvar negOne=new algebra();\nnegOne.coef[0]=negOneF;\nnegOne.terms[0]=new term();\nx.addSymbol(randomArrayElement(pronumeral),one);\nvar a=new Array();\nfor(var i=0;i<11;i++){\n\ta[i]=new algebra();\n\tif(i==0){\n\t\ta[i].terms[0]=x;\n\t\ta[i].coef[0]=one;\n\t}\n\telse{\n\t\ta[i].terms[0]=new term();\n\t\tif(i==3 || i==6)\n\t\t\ta[i].coef[0]=new Fraction(nonZeroRand(-9,9),1);\n\t\telse if(i==1 || i==4)\n\t\t\ta[i].coef[0]=new Fraction(randomInt(2,9),1);\n\t\telse if(i==2 || i==5)\n\t\t\ta[i].coef[0]=new Fraction(randomInt(1,9),1);\n\t\telse\n\t\t\ta[i].coef[0]=new Fraction(1,1);\n\t}\n}\nvar qNum={  'exp'   :   'Expand brackets: &#160;&#160;&#160;&#160;',\n\t\t'expand':   '',\n\t\t'result3':  '',\n\t\t\"$\"     :   \"`\"\n};\nvar expand=true;\nswitch(randomLowInt(0,3)){\n\tcase 0:\n\t\tqNum['equ']=a[0].mult(a[2]).add(a[3]).string()+'='+a[0].mult(a[5]).add(a[6]).string();\n\t\ta[7]=a[2];\n\t\ta[8]=a[3];\n\t\ta[9]=a[5];\n\t\ta[10]=a[6];\n\t\tqNum['exp']='';\n\t\texpand=false;\n\t\tbreak;\n\tcase 1:\n\t\tqNum['equ']=a[1].string()+'('+a[0].mult(a[2]).add(a[3]).string()+')='+a[0].mult(a[5]).add(a[6]).string();\n\t\ta[7]=a[1].mult(a[2]);\n\t\ta[8]=a[1].mult(a[3]);\n\t\ta[9]=a[5];\n\t\ta[10]=a[6];\n\t\tbreak;\n\tcase 2:\n\t\tqNum['equ']=a[0].mult(a[2]).add(a[3]).string()+'='+a[4].string()+'('+a[0].mult(a[5]).add(a[6]).string()+')';\n\t\ta[7]=a[2];\n\t\ta[8]=a[3];\n\t\ta[9]=a[4].mult(a[5]);\n\t\ta[10]=a[4].mult(a[6]);\n\t\tbreak;\n\tcase 3:\n\t\tqNum['equ']=a[1].string()+'('+a[0].mult(a[2]).add(a[3]).string()+')='+a[4].string()+'('+a[0].mult(a[5]).add(a[6]).string()+')';\n\t\ta[7]=a[1].mult(a[2]);\n\t\ta[8]=a[1].mult(a[3]);\n\t\ta[9]=a[4].mult(a[5]);\n\t\ta[10]=a[4].mult(a[6]);\n\t\tbreak;\n\n}\nif(expand)\n\tqNum['expand']='`'+a[7].mult(a[0]).add(a[8]).string()+'='+a[0].mult(a[9]).add(a[10]).string()+'`';\nif(a[7].coef[0].numerator<a[9].coef[0].numerator && a[9].coef[0].numerator>0){\n\tif(a[7].coef[0].numerator>0)\n\t\tqNum['addsub1']='subtracting `'+a[0].mult(a[7]).string()+'` from';\n\telse\n\t\tqNum['addsub1']='adding `'+a[0].mult(a[7]).mult(negOne).string()+'` to';\n\tqNum['result1']=a[8].string()+'='+a[0].mult(a[9]).add(a[10]).sub(a[7].mult(a[0])).string();\n\tif(a[10].coef[0].numerator>0)\n\t\tqNum['addsub2']='subtract `'+a[10].string()+'` from';\n\telse\n\t\tqNum['addsub2']='add `'+a[10].mult(negOne).string()+'` to';\n\tqNum['result2']=a[8].sub(a[10]).string()+'='+a[0].mult(a[9]).sub(a[7].mult(a[0])).string();\n\tqNum['div']='finally, divide by `'+a[9].sub(a[7]).string()+'`.';\n}\nelse{\n\tif(a[9].coef[0].numerator>0)\n\t\tqNum['addsub1']='subtracting `'+a[0].mult(a[9]).string()+'` from';\n\telse\n\t\tqNum['addsub1']='adding `'+a[0].mult(a[9]).mult(negOne).string()+'` to';\n\tqNum['result1']=a[7].mult(a[0]).add(a[8]).sub(a[0].mult(a[9])).string()+'='+a[10].string();\n\tif(a[8].coef[0].numerator>0)\n\t\tqNum['addsub2']='subtract `'+a[8].string()+'` from';\n\telse\n\t\tqNum['addsub2']='add `'+a[8].mult(negOne).string()+'` to';\n\tqNum['result2']=a[7].mult(a[0]).sub(a[0].mult(a[9])).string()+'='+a[10].sub(a[8]).string();\n\tqNum['div']='finally, divide by `'+a[7].sub(a[9]).string()+'`.';\n}\nif(qNum['div']=='finally, divide by `1`.')\n\tqNum['div']='';\nelse\n\tqNum['result3']=a[0].string()+'='+a[8].sub(a[10]).coef[0].div(a[9].sub(a[7]).coef[0]).string();\n        qNum['question']='<p>Solve the following equation:<\/p><p>[$][equ][$]<\/p>';\n        qNum['answer']='<p>[exp] [expand]<\/p><p>gather like terms by [addsub1] both sides:<br>`[result1]`<\/p><p>now [addsub2] both sides <br>`[result2]`<\/p><p>[div]<br>`[result3]`<\/p>';        \n            \n        "
    }, {
        "category": ["Algebra", "Equations", "Equations 3"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \nvar pronumeral=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','p','q','r','s','t','u','v','w','x','y','z'];\nvar x=new term();\nvar one=new Fraction(1,1);\nvar negOne=new algebra();\nnegOne.coef[0]=new Fraction(-1,1);\nnegOne.terms[0]=new term();\nvar zero=new algebra();\nzero.coef[0]=new Fraction(0,1);\nzero.terms[0]=new term();\nx.addSymbol(randomArrayElement(pronumeral),one);\nvar a=new Array();\nfor(var i=0;i<10;i++){\n  a[i]=new algebra();\n  if(i==0){\n\ta[i].terms[0]=x;\n\ta[i].coef[0]=one;\n  }\n  else{\n\ta[i].terms[0]=new term();\n\tif(i==2 || i==4 || i==5)\n\t\ta[i].coef[0]=new Fraction(nonZeroRand(-9,9),1);\n\telse if(i==3)\n\t\ta[i].coef[0]=new Fraction(randomInt(2,9),1);\n\telse if(i==1)\n\t\ta[i].coef[0]=new Fraction(randomInt(1,9),1);\n\telse\n\t\ta[i].coef[0]=one;\n  }\n}\nvar qNum={  'exp'   :   'Expand brackets:&#160;&#160;&#160;&#160;',\n\t\t'expand':   '',\n\t\t'addsub1':  '',\n\t\t'addsub2':  '',\n\t\t'result1':  '',\n\t\t'result2':  '',\n\t\t'result3':  '',\n\t\t\"$\"\t :   \"`\"\t\n};\nvar expand=true;\nswitch(randomInt(0,6)){\n  case 0:\n\tqNum['equ']=a[0].mult(a[1]).add(a[2]).div(a[3]).string()+'='+a[5].string();\n\tqNum['mult']=a[3].string();\n\texpand=false;\n\tqNum['factor']='`'+a[0].mult(a[1]).add(a[2]).string()+'='+a[5].mult(a[3]).string()+'`';\n\ta[6]=a[1];\n\ta[7]=a[2];\n\ta[8]=zero;\n\ta[9]=a[5].mult(a[3]);\n\tbreak;\n  case 1:\n\tqNum['equ']=a[2].div(a[0].mult(a[3]).add(a[4])).string()+'='+a[5].string();\n\tqNum['mult']='('+a[0].mult(a[3]).add(a[4]).string()+')';\n\tqNum['factor']='`'+a[2].string()+'='+a[5].string()+'('+a[0].mult(a[3]).add(a[4]).string()+')`';\n\ta[6]=zero;\n\ta[7]=a[2];\n\ta[8]=a[5].mult(a[3]);\n\ta[9]=a[5].mult(a[4]);\n\tbreak;\n  case 2:\n\tqNum['equ']=a[0].mult(a[1]).add(a[2]).div(a[0].mult(a[3]).add(a[4])).string()+'='+a[5].string();\n\tqNum['mult']='('+a[0].mult(a[3]).add(a[4]).string()+')';\n\tqNum['factor']='`'+a[0].mult(a[1]).add(a[2]).string()+'='+a[5].string()+'('+a[0].mult(a[3]).add(a[4]).string()+')`';\n\ta[6]=a[1];\n\ta[7]=a[2];\n\ta[8]=a[5].mult(a[3]);\n\ta[9]=a[5].mult(a[4]);\n\tbreak;\n  case 3:\n\tqNum['equ']=a[0].mult(a[1]).div(a[0].mult(a[3]).add(a[4])).string()+'='+a[5].string();\n\tqNum['mult']='('+a[0].mult(a[3]).add(a[4]).string()+')';\n\tqNum['factor']='`'+a[0].mult(a[1]).string()+'='+a[5].string()+'('+a[0].mult(a[3]).add(a[4]).string()+')`';\n\ta[6]=a[1];\n\ta[7]=zero;\n\ta[8]=a[5].mult(a[3]);\n\ta[9]=a[5].mult(a[4]);\n\tbreak;\n  case 4:\n\tqNum['equ']=a[0].mult(a[1]).add(a[2]).div(a[0].mult(a[3])).string()+'='+a[5].string();\n\tqNum['mult']=a[0].mult(a[3]).string();\n\texpand=false;\n\tqNum['factor']='`'+a[0].mult(a[1]).add(a[2]).string()+'='+a[5].mult(a[0]).mult(a[3]).string()+'`';\n\ta[6]=a[1];\n\ta[7]=a[2];\n\ta[8]=a[5].mult(a[3]);\n\ta[9]=zero;\n\tbreak;\n  case 5:\n\tqNum['equ']=a[0].mult(a[1]).add(a[2]).div(a[3]).string()+'='+a[0].mult(a[4]).add(a[5]).string();\n\tqNum['mult']=a[3].string();\n\tqNum['factor']='`'+a[0].mult(a[1]).add(a[2]).string()+'='+a[3].string()+'('+a[0].mult(a[4]).add(a[5]).string()+')`';\n\ta[6]=a[1];\n\ta[7]=a[2];\n\ta[8]=a[3].mult(a[4]);\n\ta[9]=a[3].mult(a[5]);\n\tbreak;\n  case 6:\n\tqNum['equ']=a[0].mult(a[1]).add(a[2]).div(a[3]).string()+'='+a[0].mult(a[4]).string();\n\tqNum['mult']=a[3].string();\n\texpand=false;\n\tqNum['factor']='`'+a[0].mult(a[1]).add(a[2]).string()+'='+a[3].mult(a[0]).mult(a[4]).string()+'`';\n\ta[6]=a[1];\n\ta[7]=a[2];\n\ta[8]=a[3].mult(a[4]);\n\ta[9]=zero;\n\tbreak;\n}\nif(expand)\n\tqNum['expand']='`'+a[6].mult(a[0]).add(a[7]).string()+'='+a[0].mult(a[8]).add(a[9]).string()+'`';\nelse\n\tqNum['exp']='';\nif(a[6].coef[0].numerator<a[8].coef[0].numerator || a[6].coef[0].numerator==0){\t \n  if(a[6].coef[0].numerator){\n\tif(a[6].coef[0].numerator>0)\n\t\tqNum['addsub1']='subtract `'+a[0].mult(a[6]).string()+'` from both sides:&#160;&#160;&#160;&#160;';\n\telse\n\t\tqNum['addsub1']='add `'+a[0].mult(a[6]).mult(negOne).string()+'` to both sides:&#160;&#160;&#160;&#160;';\n\tqNum['result1']='`'+a[7].string()+'='+a[0].mult(a[8]).add(a[9]).sub(a[6].mult(a[0])).string()+'`';\n  }\n  if(a[9].coef[0].numerator){\n\tif(a[9].coef[0].numerator>0)\n\t\tqNum['addsub2']='subtract `'+a[9].string()+'` from both sides:&#160;&#160;&#160;&#160;';\n\telse\n\t\tqNum['addsub2']='add `'+a[9].mult(negOne).string()+'` to both sides:&#160;&#160;&#160;&#160;';\n\tqNum['result2']=a[7].sub(a[9]).string()+'='+a[0].mult(a[8]).sub(a[6].mult(a[0])).string();\n  }\n  qNum['div']='finally, divide by `'+a[8].sub(a[6]).string()+'`';\t\t\t\t\t\t\n}\nelse{\n  if(a[8].coef[0].numerator){\n\tif(a[8].coef[0].numerator>0)\n\t\tqNum['addsub1']='subtract `'+a[0].mult(a[8]).string()+'` from both sides:&#160;&#160;&#160;&#160;';\n\telse\n\t\tqNum['addsub1']='add `'+a[0].mult(a[8]).mult(negOne).string()+'` to both sides:&#160;&#160;&#160;&#160;';\n\tqNum['result1']='`'+a[6].mult(a[0]).add(a[7]).sub(a[0].mult(a[8])).string()+'='+a[9].string()+'`';\n  }\n  if(a[7].coef[0].numerator){\n\tif(a[7].coef[0].numerator>0)\n\t\tqNum['addsub2']='subtract `'+a[7].string()+'` from both sides:&#160;&#160;&#160;&#160;';\n\telse\n\t\tqNum['addsub2']='add `'+a[7].mult(negOne).string()+'` to both sides:&#160;&#160;&#160;&#160;';\n\tqNum['result2']=a[6].mult(a[0]).sub(a[0].mult(a[8])).string()+'='+a[9].sub(a[7]).string();\n  }\n  qNum['div']='finally, divide by `'+a[6].sub(a[8]).string()+'`';\n}\nif(qNum['div']=='finally, divide by `1`')\n\tqNum['div']='';\nelse\n\tqNum['result3']=a[0].string()+'='+a[7].sub(a[9]).coef[0].div(a[8].sub(a[6]).coef[0]).string();\n        qNum['question']='<p>Solve the following equation:<\/p><p>[$][equ][$]<\/p>';\n        qNum['answer']='<\/p>Multiply both sides by `[mult]`<br\/>[factor]<\/p><p>[exp] [expand]<\/p><p>[addsub1][result1]<\/p><p>[addsub2]`[result2]`<\/p><p>[div]<br\/>`[result3]`<\/p>';        \n\t\t\t\n        "
    }, {
        "category": ["Algebra", "Equations", "Equations 4"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \nvar pronumeral=['a','b','c','d','e','f','g','h','j','k','m','n','p','q','r','s','t','u','v','w','x','y','z'];\nvar x=new term();\nvar one=new Fraction(1,1);\nx.addSymbol(randomArrayElement(pronumeral),one);\nvar negOneF=new Fraction(-1,1);\nvar negOne=new algebra();\nnegOne.coef[0]=negOneF;\nnegOne.terms[0]=new term();\nvar a=new Array();\nvar intSol=new Fraction(1,1);\nvar pow=new Fraction(1,1);\nif(randomInt(0,1)){\n\tpow.numerator=randomInt(2,5);\n\tintSol.numerator=Math.pow(randomInt(1,4),pow.numerator);\n}\nelse{\n\tpow.denominator=randomInt(2,5);\n\tintSol.numerator=randomInt(1,4);\n}\nfor(var i=0;i<6;i++){\n\ta[i]=new algebra();\n\tif(i==0){\n\t\ta[i].terms[0]=x;\n\t\ta[i].coef[0]=one;\n\t}\n\telse{\n\t\ta[i].terms[0]=new term();\n\t\tif(i==3 || i==4){\n\t\t\tif(randomInt(0,1))\n\t\t\t\ta[i].coef[0]=new Fraction(randomInt(-9,9),1);\n\t\t\telse\n\t\t\t\ta[i].coef[0]=new Fraction(0,1);\n\t\t}\n\t\telse {\n\t\t\tif((i==1 || i==2) && randomInt(0,1))\n\t\t\t\ta[i].coef[0]=new Fraction(randomInt(1,9),1);\n\t\t\telse\n\t\t\t\ta[i].coef[0]=new Fraction(1,1);\n\t\t}\n\t}\n}\na[5].coef[0]=a[1].coef[0].mult(intSol).add(a[4].coef[0]);\na[6]=new algebra();\na[6].copy(a[1]);\nif(a[2].coef[0].numerator!=1 || a[3].coef[0].numerator)\n\ta[6].terms[0].addSymbol(a[0].mult(a[2]).add(a[3]),pow);\nelse{\n\ta[6].terms[0].addSymbol(a[0].terms[0].symbol[0],pow);\n}\na[6]=a[6].add(a[4]);\nvar qNum={  'equ'   :   a[6].string()+'='+a[5].string(),\n\t\t'STEP1' :   '',\n\t\t'STEP2' :   '',\n\t\t'STEP3' :   '',\n\t\t'STEP4' :   '',\n\t\t'STEP5' :   '',\n\t\t\"$\"     :   \"`\"\n};\nvar action='';\nif(a[4].coef[0].numerator){\n\taction='subtract '+a[4].string()+' from';\n\tif(a[4].coef[0].numerator<0)\n\t\taction='add '+a[4].mult(negOne).string()+' to';\n\tqNum['STEP1']=action+' both sides <span style=\"float:right\">`'+a[6].sub(a[4]).string()+'='+a[5].sub(a[4]).string()+'`<\/span>';\n}\nif(a[1].coef[0].numerator!=1){\n\tvar da1=new algebra();\n\tda1.coef[0]=new Fraction(a[1].coef[0].denominator,a[1].coef[0].numerator);\n\tda1.terms[0]=new term();\n\tqNum['STEP2']='Divide both sides by '+a[1].string()+'<span style=\"float:right\">`'+a[6].sub(a[4]).mult(da1).string()+'='+a[5].sub(a[4]).coef[0].div(a[1].coef[0]).string()+'`<\/span>';\n}\nvar pm=false;\nif(pow.numerator>pow.denominator){\n\tif(pow.numerator!=2)\n\t\tif(pow.numerator!=4)\n\t\t\tqNum['STEP3']='Take `root '+pow.numerator+' ` of both sides'\n\t\telse{\n\t\t\tqNum['STEP3']='Take `+-root '+pow.numerator+' ` of both sides'\n\t\t\tpm=true;\n\t\t}\n\telse{\n\t\tqNum['STEP3']='Take `+-sqrt ` of both sides'\n\t\tpm=true;\n\t}\n}\nelse{\n\tqNum['STEP3']='Raise both sides to power of '+pow.denominator;\n}\nvar res1=new Fraction(1,1);\nvar res2=new Fraction(1,1);\nres1=a[5].sub(a[4]).coef[0].div(a[1].coef[0]).pow(pow.denominator\/pow.numerator);\nqNum['STEP3']+='<span style=\"float:right\">`'+a[0].mult(a[2]).add(a[3]).string()+'='+res1.string();\nif(a[3].coef[0].numerator){\n\taction='subtract '+a[3].string()+' from';\n\tif(a[3].coef[0].numerator<0)\n\t\taction='add '+a[3].mult(negOne).string()+' to';\n\tqNum['STEP4']=action+' both sides<span style=\"float:right\">`'+a[0].mult(a[2]).string()+'='+res1.sub(a[3].coef[0]).string();\n}\nif(a[2].coef[0].numerator!=1){\n\tqNum['STEP5']='Divide both sides by '+a[2].string()+'<span style=\"float:right\">`'+a[0].string()+'='+res1.sub(a[3].coef[0]).div(a[2].coef[0]).string();\n}\nif(pm){\n\tres2=a[5].sub(a[4]).coef[0].div(a[1].coef[0]).pow(pow.denominator\/pow.numerator).mult(negOneF);\n\tqNum['STEP3']+='`&#160;&#160; or &#160;&#160;`'+res2.string();\n\tif(qNum['STEP4'])qNum['STEP4']+='`&#160;&#160; or &#160;&#160;`'+res2.sub(a[3].coef[0]).string();\n\tif(qNum['STEP5'])qNum['STEP5']+='`&#160;&#160; or &#160;&#160;`'+res2.sub(a[3].coef[0]).div(a[2].coef[0]).string();\n}\nqNum['STEP3']+='`<\/span>';\nif(qNum['STEP4'])qNum['STEP4']+='`<\/span>';\nif(qNum['STEP5'])qNum['STEP5']+='`<\/span>';\n        qNum['question']='<p>Solve the following equation:<\/p><p>[$][equ][$]<\/p>';\n        qNum['answer']='<p>[STEP1]<\/p><p>[STEP2]<\/p><p>[STEP3]<\/p><p>[STEP4]<\/p><p>[STEP5]<\/p>';\n\t\t\t\n        "
    }, {
        "category": ["Algebra", "Equations", "Equations 5"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \nvar pronumeral=['a','b','c','d','e','f','g','h','j','k','m','n','p','q','r','s','t','u','v','w','x','y','z'];\nvar x=new term();\nvar one=new Fraction(1,1);\nx.addSymbol(randomArrayElement(pronumeral),one);\nvar negOneF=new Fraction(-1,1);\nvar negOne=new algebra();\nnegOne.coef[0]=negOneF;\nnegOne.terms[0]=new term();\nvar a=new Array();\nfor(var i=0;i<8;i++){\n\ta[i]=new algebra();\n\tif(i==0){\n\t\ta[i].terms[0]=x;\n\t\ta[i].coef[0]=one;\n\t}\n\telse{\n\t\ta[i].terms[0]=new term();\n\t\tif(i==2 || i==5 || i==7){\n\t\t\tif(randomInt(0,1) || i==7)\n\t\t\t\ta[i].coef[0]=new Fraction(randomInt(-9,9),1);\n\t\t\telse\n\t\t\t\ta[i].coef[0]=new Fraction(0,1);\n\t\t}\n\t\telse if(i==1 || i==4)\n\t\t\ta[i].coef[0]=new Fraction(randomInt(1,9),1);\n\t\telse if(i==3 || i==6)\n\t\t\tdo{\n\t\t\t\ta[i].coef[0]=new Fraction(randomInt(2,9),1);\n\t\t\t}\n\t\t\twhile(i==6 && gcd(a[3].coef[0].numerator,a[6].coef[0].numerator)==Math.min(a[3].coef[0].numerator,a[6].coef[0].numerator));\n\t\telse\n\t\t\ta[i].coef[0]=new Fraction(1,1);\n\t}\n}\nvar g=gcd(a[3].coef[0].numerator,a[6].coef[0].numerator);\nif(g!=1){\n\ta[3].coef[0].numerator\/=g;\n\ta[6].coef[0].numerator\/=g;\n}\nvar a10string='';\nvar a10stringy='';\nif(randomInt(0,1)){\n\ta[8]=a[0].mult(a[1]).add(a[2]).div(a[3]).add(a[0].mult(a[4]).add(a[5]).div(a[6]));\n\ta[9]=a[0].mult(a[1]).add(a[2]).add(a[3].mult(a[0].mult(a[4]).add(a[5]).div(a[6])));\n\ta10string=a[6].string()+'('+a[0].mult(a[1]).add(a[2]).string()+')+'+a[3].string()+'('+a[0].mult(a[4]).add(a[5]).string()+')';\n\ta10stringy=a[6].mult(a[0].mult(a[1]).add(a[2])).string()+'+'+(a[3].mult(a[0].mult(a[4]).add(a[5]))).string();\n\ta[10]=a[6].mult(a[0].mult(a[1]).add(a[2])).add(a[3].mult(a[0].mult(a[4]).add(a[5])));\n}\nelse{\n\ta[8]=a[0].mult(a[1]).add(a[2]).div(a[3]).sub(a[0].mult(a[4]).sub(a[5]).div(a[6]));\n\ta[9]=a[0].mult(a[1]).add(a[2]).sub(a[3].mult(a[0].mult(a[4]).add(a[5]).div(a[6])));\n\ta10string=a[6].string()+'('+a[0].mult(a[1]).add(a[2]).string()+')-'+a[3].string()+'('+a[0].mult(a[4]).add(a[5]).string()+')';\n\ta10stringy=a[6].mult(a[0].mult(a[1]).add(a[2])).string()+'-'+(a[3].mult(a[0].mult(a[4]).add(a[5]))).string();\n\ta[10]=a[6].mult(a[0].mult(a[1]).add(a[2])).sub(a[3].mult(a[0].mult(a[4]).add(a[5])));\n}\na[11]=a[7].mult(a[3]).mult(a[6]);\nvar qNum={  'equ'   :   a[8].string()+'='+a[7].string(),\n\t\t'STEP1' :   'Multiply both sides by `'+a[3].string()+'`<span style=\"float:right\">`'+a[9].string()+'='+a[7].mult(a[3]).string()+'`<\/span>',\n\t\t'STEP2' :   'Multiply both sides by `'+a[6].string()+'`<span style=\"float:right\">`'+a10string+'='+a[11].string()+'`<\/span>',\n\t\t'STEP3' :   'Expand brackets <span style=\"float:right\">`'+a10stringy+'='+a[11].string()+'`<\/span>',\n\t\t'STEP4' :   'Gather like terms <span style=\"float:right\">`'+a[10].string()+'='+a[11].string()+'`<\/span>',\n\t\t'STEP5' :   '',\n\t\t'STEP6' :   '',\n\t\t\"$\"     :   \"`\"\n};\nif(a[10].coef.length>1){\n\tif(a[10].coef[1].numerator>0)\n\t\tqNum['STEP5']='Subtract '+a[10].coef[1].string()+' from both sides <span style=\"float:right\">`';\n\telse\n\t\tqNum['STEP5']='Add '+a[10].coef[1].mult(negOneF).string()+' to both sides <span style=\"float:right\">`';\n\tvar t=new algebra();\n\tt.coef[0]=a[10].coef[1];\n\tt.terms[0]=new term();\n\ta[11]=a[11].sub(t);\n\tqNum['STEP5']+=a[10].sub(t).string()+'='+a[11].string()+'`<\/span>';\n}\nif(a[10].coef[0].numerator!=1)\n\tqNum['STEP6']='Divide both sides by '+a[10].coef[0].string()+'<span style=\"float:right\">`'+a[0].string()+'='+a[11].coef[0].div(a[10].coef[0]).string()+'`<\/span>';\n        qNum['question']='<p>Solve the following equation:<\/p><p>[$][equ][$]<\/p>';\n        qNum['answer']='<div style=\"width:300px;\"><p style=\"margin: 0 0 1.5em 0;\">[STEP1]<\/p><p>[STEP2]<\/p><p>[STEP3]<\/p><p>[STEP4]<\/p><p>[STEP5]<\/p><p>[STEP6]<\/p>';        \n\t\t\t\n        "
    }, {
        "category": ["Algebra", "Simultaneous Equations", "Substitution Method"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \n          do{\n          var coefficients = [nonZeroRand(-9, 9), nonZeroRand(-9, 9),0, nonZeroRand(-9, 9), nonZeroRand(-9, 9), 0];\n    \/\/choosing nicer variables\n    var den = randomLowInt(1, 9);\n    var ansX = nonZeroRand(-9, 9);\n    var ansY = nonZeroRand(-9, 9);\n    var xr = ansX % den;\n    var yr = ansY % den;\n    for (var i = 0; i < 2; i++) {\n        var point=i*3+1;\n        var count=0;\n        while ((coefficients[i*3] * xr + coefficients[i*3+1] * yr) % den != 0) {\n            count++;\n            coefficients[point] = nonZeroRand(-9, 9);\n            if (count % 10 == 0)\n                point = (point==i*3) ? i*3+1 : i*3;\n        }\n    }\n    coefficients[2]=(coefficients[0]*ansX+coefficients[1]*ansY)\/den;\n    coefficients[5]=(coefficients[3]*ansX+coefficients[4]*ansY)\/den;\n    }while(coefficients[0]*coefficients[4]-coefficients[1]*coefficients[3]==0)\n    var a, b, c, d, e, f, target = -1, z;\n    if (Math.abs(coefficients[0]) == 1)\n        target = 0;\n    else if (Math.abs(coefficients[1]) == 1)\n        target = 1;\n    else if (Math.abs(coefficients[3]) == 1)\n        target = 3;\n    else if (Math.abs(coefficients[4]) == 1)\n        target = 4;\n    else\n        target = randomArrayElement([0, 1, 3, 4]);\n    switch (target) {\n        case 0:\n            a = coefficients[0];\n            b = coefficients[1];\n            c = coefficients[2];\n            d = coefficients[3];\n            e = coefficients[4];\n            f = coefficients[5];\n            z = 'x';\n            break;\n        case 1:\n            a = coefficients[1];\n            b = coefficients[0];\n            c = coefficients[2];\n            d = coefficients[4];\n            e = coefficients[3];\n            f = coefficients[5];\n            z = 'y';\n            break;\n        case 3:\n            a = coefficients[3];\n            b = coefficients[4];\n            c = coefficients[5];\n            d = coefficients[0];\n            e = coefficients[1];\n            f = coefficients[2];\n            z = 'x';\n            break;\n        case 4:\n            a = coefficients[4];\n            b = coefficients[3];\n            c = coefficients[5];\n            d = coefficients[1];\n            e = coefficients[0];\n            f = coefficients[2];\n            z = 'y';\n            break;\n    }\n    var z2 = (z == 'x') ? 'y' : 'x';\n    var one =new Fraction(1,1);\n    var A=new algebra();\n    A.coef[0]=new Fraction(a,1);\n    var B=new algebra();\n    B.coef[0]=new Fraction(b,1);\n    B.terms[0].addSymbol(z2,one);\n    var C=new algebra();\n    C.coef[0]=new Fraction(c,1);\n    var D=new algebra();\n    D.coef[0]=new Fraction(d,1);\n    var E=new algebra();\n    E.coef[0]=new Fraction(e,1);\n    E.terms[0].addSymbol(z2,one);\n    var F=new algebra();\n    F.coef[0]=new Fraction(f,1);\n    var w = new Array();\n    if(Math.abs(a)==1)\n        w[0]=C.sub(B).mult(a);\n    else\n        w[0]=C.sub(B).div(A);\n    w[2]=new algebra();\n    if(target==0||target==3){\n        w[1]=D.mult(w[0]).add(E);\n        w[2].coef[0]=new Fraction(d,1);\n        w[2].terms[0].addSymbol(C.sub(B),one);\n        w[2]=w[2].add(E.mult(A));\n        w[3]=D.mult(C.sub(B));\n        w[3].terms[2]=new term();\n        w[3].coef[2]=w[2].coef[1];\n        w[3].terms[2]=w[2].terms[1];\n        w[4]=D.mult(C.sub(B)).add(E.mult(A));\n    }else{\n        w[1]=E.add(D.mult(w[0]));\n        w[2]=E.mult(A);\n        w[2].coef[1]=new Fraction(d,1);\n        w[2].terms[1]=new term();\n        w[2].terms[1].addSymbol(C.sub(B),one);\n        w[3]=E.mult(A).add(D.mult(C));\n        w[3].terms[2]=new term();\n        w[3].coef[2]=D.mult(B).mult(-1).coef[0];\n        w[3].terms[2]=D.mult(B).mult(-1).terms[0];\n        w[4]=E.mult(A).add(D.mult(C.sub(B)));\n    }    \n    w[5]=w[4].sub(D.mult(C));\n    var s2=new Fraction(f*a-d*c,a*e-b*d)\n    var S1=new algebra(), S2=new algebra;\n    S1.coef[0]=s2.mult(B.coef[0]);\n    S2.coef[0]=s2;\n    w[6]=C.sub(S1).coef[0].div(A.coef[0]);    \n    w[7]=C.sub(B);\n    w[7].terms[1]=new term();\n    w[7].terms[1].addSymbol(S2,one);\n    if(Math.abs(a)==1)\n        w[7]=w[7].mult(a);\n    else\n        w[7]=w[7].div(A);\n    var qNum={\n        \"a\": coefficients[0],\n        \"b\": coefficients[1],\n        \"c\": coefficients[2],\n        \"d\": coefficients[3],\n        \"e\": coefficients[4],\n        \"f\": coefficients[5],\n        \"fa\":c*a,\n        \"z\": z,\n        \"z2\": z2,\n        \"s1\":w[6].string(),\n        \"s2\": s2.string(),\n        \"e1\": '(1)',\n        \"e2\": '(2)',\n        \"sub\": w[0].string(),\n        \"working1\":  '<p>[$]'+w[1].string() + '='+f+'[$]<\/p>',\n        \"working2\": '<p>[$]' +w[2].string() + '='+(f*a)+'[$]<\/p>',\n        \"working3\": w[3].string()+'='+(f*a),\n        \"working4\":w[4].string()+'='+(f*a),\n        \"working5\":w[5].string()+'='+(f*a-d*c),\n        \"working6\": w[7].string()+'=[s1]' ,\n        \"$\": \"`\"\n    };\n    if (target == 3 || target == 4) {\n        qNum['e1'] = '(2)';\n        qNum['e2'] = '(1)';\n    }\n    if(Math.abs(a)==1){\n        qNum['working1']=qNum['working2'];\n        qNum['working2']='';\n    }\n        qNum['question']='<p>Solve these simultaneous equations <u>using the substitution method<\/u>.<\/p><p>[$][!a][x][+!b][y]=[c][$] &nbsp;-&nbsp;-&nbsp;-&nbsp; (1)<\/p><p>[$][!d][x][+!e][y]=[f][$] &nbsp;-&nbsp;-&nbsp;-&nbsp; (2)<\/p>';\n        qNum['answer']='<p>Make [$][z][$] the subject of equation [e1]:<\/p><p>[$][z]=[sub][$] &nbsp;-&nbsp;-&nbsp;-&nbsp; (3)<\/p><p>Now substitute this into equation [e2]:<\/p>[?working1]<p>Now solve to get value of [$][z2][$]<\/p>[?working2]<p>[$][?working3][$]<\/p><p>[$][working4][$]<\/p><p>[$][working5][$]<\/p><p>[$][z2]=[s2][$]<\/p><p>Now substitute [$][z2]=[s2][$] into (3) to get the value of [$][z][$]<\/p><p>[$][z]=[sub]=[?working6][$]<\/p>';    \n\t\t\t\n        "
    }, {
        "category": ["Algebra", "Simultaneous Equations", "Elimination Method"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \n    var one = new Fraction(1, 1);\n    var Cf = new Array(), CfSyms = ['x', 'y', ''], A = [nonZeroRand(-9, 9), nonZeroRand(-9, 9),0, nonZeroRand(-9, 9), nonZeroRand(-9, 9), 0];\n    \/\/choosing nicer variables\n    var den = randomLowInt(1, 9);\n    var ansX = nonZeroRand(-9, 9);\n    var ansY = nonZeroRand(-9, 9);\n    var xr = ansX % den;\n    var yr = ansY % den;\n    for (var i = 0; i < 2; i++) {\n        var point=i*3+1;\n        var count=0;\n        while ((A[i*3] * xr + A[i*3+1] * yr) % den != 0) {\n            count++;\n            A[point] = nonZeroRand(-9, 9);\n            if (count % 10 == 0)\n                point = (point==i*3) ? i*3+1 : i*3;\n        }\n    }\n    A[2]=(A[0]*ansX+A[1]*ansY)\/den;\n    A[5]=(A[3]*ansX+A[4]*ansY)\/den;\n    for (var i = 0; i < 6; i++) {\n        Cf[i] = new algebra();\n        Cf[i].terms[0].addSymbol(CfSyms[i % 3], one);\n        Cf[i].coef[0]=new Fraction(A[i],1);\n    }\n    Cf[6] = Cf[0].add(Cf[1]);\n    Cf[7] = Cf[3].add(Cf[4]);\n    var a = Cf[0].coef[0].numerator;\n    var b = Cf[1].coef[0].numerator;\n    var c = Cf[2].coef[0].numerator;\n    var d = Cf[3].coef[0].numerator;\n    var e = Cf[4].coef[0].numerator;\n    var f = Cf[5].coef[0].numerator;\n    var LCM1 = lcm(a, d);\n    var LCM2 = lcm(b, e);\n    var ths, tht, itisX, itisEq1;\n    if (Math.abs(LCM1) <= Math.abs(LCM2)) {\n        ths = LCM1 \/ a;\n        tht = LCM1 \/ d;\n        Cf[8] = Cf[6].mult(ths);\n        Cf[9] = Cf[7].mult(tht);\n        itisX = false;\n        if (Math.abs(b) <= Math.abs(e))\n            itisEq1 = true;\n        else\n            itisEq1 = false;\n    } else {\n        ths = LCM2 \/ b;\n        tht = LCM2 \/ e;\n        Cf[8] = Cf[6].mult(ths);\n        Cf[9] = Cf[7].mult(tht);\n        itisX = true;\n        if (Math.abs(a) <= Math.abs(d))\n            itisEq1 = true;\n        else\n            itisEq1 = false;\n\n    }\n    Cf[10] = new algebra();\n    Cf[10].coef[0] = one;\n    Cf[10].coef[1] = new Fraction(-1, 1);\n    Cf[10].terms[0].addSymbol(Cf[8], one);\n    Cf[10].terms[1] = new term();\n    Cf[10].terms[1].addSymbol(Cf[9], one);\n    Cf[11] = new algebra();\n    Cf[11].coef[0] = one;\n    Cf[11].terms[0].addSymbol(Cf[8], one);\n    Cf[11] = Cf[11].sub(Cf[3].mult(tht));\n    Cf[11].coef[2] = Cf[4].mult(-tht).coef[0];\n    Cf[11].terms[2] = new term();\n    Cf[11].terms[2].addSymbol('y', one);\n    var S1 = new algebra();\n    S1.coef[0] = new Fraction(c * ths - f * tht, Cf[8].sub(Cf[9]).coef[0].numerator);\n    Cf[12] = new algebra();\n    if (itisEq1)\n        Cf[12].copy(Cf[6]);\n    else\n        Cf[12].copy(Cf[7]);\n    if (itisX)\n        Cf[12].terms[0].symbol[0] = S1;\n    else\n        Cf[12].terms[1].symbol[0] = S1;\n    Cf[13] = new algebra();\n    var target = (itisX) ? '0' : '1';\n    Cf[13].copy(Cf[12]);\n    Cf[13].terms[target] = new term();\n    Cf[13].coef[target] = Cf[13].coef[target].mult(S1.coef[0]);\n    Cf[14] = Cf[13].sub(S1.mult(Cf[12].coef[target].numerator));\n    var S = new Fraction((itisEq1) ? c : f, 1);\n    S = S.sub(S1.coef[0].mult(Cf[12].coef[target]));\n    var S2 = S.div(Cf[14].coef[0]);\n    var qNum={\n        \"axby\": Cf[6].string(),\n        \"c\": Cf[2].string(),\n        \"dxey\": Cf[7].string(),\n        \"f\": Cf[5].string(),\n        \"this\": ths,\n        \"that\": tht,\n        \"multEq1\": '<p>Multiply equation (1) by [this] [?and]<\/p><p>[$]' + Cf[8].string() + '=' + (c * ths) + '[$]&nbsp;-&nbsp;-&nbsp;-&nbsp; (3)<\/p>',\n        \"and\": 'and multiply equation (2) by [that]',\n        \"multEq2\": '<p>[$]' + Cf[9].string() + '=' + (f * tht) + '[$]&nbsp;-&nbsp;-&nbsp;-&nbsp; (4)<\/p>',\n        \"one\": '(3)',\n        \"two\": '(4)',\n        \"working1\": Cf[10].string() + '=' + (c * ths) + '-' + (f * tht),\n        \"working2\": Cf[11].string() + '=' + (c * ths - f * tht),\n        \"working3\": Cf[8].sub(Cf[9]).string() + '=' + (c * ths - f * tht),\n        \"solutions\": '<p>Hence [$][z1]=[s1][$], now find value of [$][z2][$] using equation [eq]<\/p><p>[$][working4][$]<\/p><p>[$][working5][$]<\/p><p>[$][?working6][$]<\/p><p>[$][z2]=[s2][$]<\/p>',\n        \"z1\": (itisX) ? 'x' : 'y',\n        \"z2\": (itisX) ? 'y' : 'x',\n        \"s1\": S1.string(),\n        \"eq\": (itisEq1) ? '(1)' : '(2)',\n        \"working4\": Cf[12].string() + '=' + ((itisEq1) ? c : f),\n        \"working5\": Cf[13].string() + '=' + ((itisEq1) ? c : f),\n        \"working6\": Cf[14].string() + '=' + ((itisEq1) ? c : f) + '[p]' + S1.mult(Cf[12].coef[target].numerator).mult(-1).string() + '=' + S.string(),\n        \"p\": '+',\n        \"s2\": S2.string(),\n        \"$\": \"`\"\n    }\n    if (S1.mult(Cf[12].coef[target].numerator).coef[0].decimal() > 0)\n        qNum['p'] = '';\n    if (ths == 1) {\n        qNum['one'] = '(1)';\n        qNum['two'] = '(3)';\n        qNum['multEq1'] = '<p>Multiply equation (2) by [that]<\/p><p>[$]' + Cf[9].string() + '=' + (f * tht) + '[$]&nbsp;-&nbsp;-&nbsp;-&nbsp; (3)<\/p>'\n        qNum['multEq2'] = '';\n    }\n    if (tht == 1) {\n        qNum['two'] = '(2)';\n        qNum['and'] = '';\n        qNum['multEq2'] = '';\n    }\n    if (ths == 1 && tht == 1) {\n        qNum['multEq1'] = '';\n    }\n    if (S1.coef[0].numerator == 0)\n        qNum['solutions'] = 'It is not possible to find a single solution to these equations.';\n        qNum['question']='<p>Solve these simultaneous equations <u>using the elimination method<\/u>.<\/p><p>[$][axby]=[c][$] &nbsp;-&nbsp;-&nbsp;-&nbsp; (1)<\/p><p>[$][dxey]=[f][$] &nbsp;-&nbsp;-&nbsp;-&nbsp; (2)<\/p>';\n        qNum['answer']='[?multEq1][?multEq2]<p>subtract equation [two] from equation [one]<\/p><p>[$][working1][$]<\/p><p>[$][working2][$]<\/p><p>[$][?working3][$]<\/p><p>Hence [$][z1]=[s1][$], now find value of [$][z2][$] using equation [eq]<\/p><p>[$][working4][$]<\/p><p>[$][working5][$]<\/p><p>[$][?working6][$]<\/p><p>[$][z2]=[s2][$]<\/p>';        \n\t\t\t\n        "
    }, {
        "category": ["Algebra", "Logarithms", "Logarithms 1"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n            var qNum={  'a' :   randomInt(2,12),\n                    \"$\" :   \"`\"\n            };\n            qNum['x']=randomInt(0, Math.floor(4*Math.log(10)\/Math.log(qNum['a'])));\n            qNum['y']=Math.pow(qNum['a'],qNum['x']);\n            if(randomInt(0,3)==0){\n                qNum['x']*=-1;\n                var y=new Fraction(1,qNum['y']);\n                qNum['y']=y.string();\n            }\n        qNum['question']='<p>What is the value of [$]log_[a]([y])[$] ?<\/p><p>Answer without using the LOG button on your calculator.<\/p>';\n        qNum['answer']='<p>`log_[a]([y])=[x]`<\/p><p>because<\/p><p>`[a]^[x]=[y]`<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Algebra", "Logarithms", "Logarithms 2"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n            var qNum={  'a' :   randomInt(2,12),\n                    'y' :   randomLowInt(2,1000),\n                    \"$\" :   \"`\"\n            };\n            while(qNum['a']==10)\n                qNum['a']=randomInt(2,12);\n            var x=Math.log(qNum['y'])\/Math.log(qNum['a']);\n            qNum['x']=Math.round(x*100000)\/100000+'(5dp)';\n        qNum['question']='<p>Use the <span style=\"border: 1px solid;\">LOG<\/span> or <span style=\"border: 1px solid;\">ln<\/span> buttons on you calculator to evaluate:<\/p><p>[$]log_[a]([y])[$]<\/p><p>correct to 5dp.<\/p>';\n        qNum['answer']='<p>Using the change of base rule:<\/p><p>[$]log_[a]([y])=(log_(10)([y]))\/(log_(10)([a]))[$] <span style=\"float: right;\"> or&#160;&#160;[$](ln([y]))\/(ln([a]))[$]<\/span><\/p><p>[$]=[x][$]<\/p><p>On the calculator, type:<\/p><p><span style=\"border: 1px solid;\">LOG<\/span>[y]<span style=\"border: 1px solid;\">`-:`<\/span> <span style=\"border: 1px solid;\">LOG<\/span> [a] <span style=\"border: 1px solid;\">=<\/span> <span style=\"float: right\">or&#160;&#160;&#160;&#160;<span style=\"border: 1px solid;\">ln<\/span>[y]<span style=\"border: 1px solid;\">`-:`<\/span> <span style=\"border: 1px solid;\">ln<\/span> [a] <span style=\"border: 1px solid;\">=<\/span><\/span><\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Algebra", "Logarithms", "Logarithms 3"],
        "subject": ["EPMATH135", "EPMATH302"],
        "code": " \n\t  \n            var qNum={  'a' :   randomLowInt(2,99),\n                    'b' :   randomLowInt(2,99),\n                    'c' :   randomLowInt(2,99),\n                    'l' :   randomInt(2,12),\n                    'pm1':  '+',\n                    'pm2':  '',\n                    'md1':  'xx',\n                    'md2':  '',\n                    'log':  '',\n                    'number':'',\n                    \"$\" :   \"`\"\n            };\n            var abc = new Fraction(qNum['a']*qNum['b'],1);\n            if(randomInt(0,1)){\n                qNum['pm1']='-';\n                qNum['md1']='-:';\n                var abc = new Fraction(qNum['a'],qNum['b']);\n            }\n            if(randomInt(0,2)==0){\n                if(randomInt(0,1)){\n                    qNum['pm2']='-';\n                    qNum['md2']='-:';\n                    var c=new Fraction(qNum['c'],1);\n                    abc=abc.div(c);\n                }\n                else{\n                    qNum['pm2']='+';\n                    qNum['md2']='xx';\n                    var c=new Fraction(qNum['c'],1);\n                    abc=abc.mult(c);\n                }\n                qNum['log']='log_[l]([c])';\n            }\n            else\n                qNum['c']='';\n            while(qNum['a']==10)\n                qNum['a']=randomInt(2,12);\n            var x=Math.log(qNum['y'])\/Math.log(qNum['a']);\n            qNum['x']=Math.round(x*100000)\/100000+'(5dp)';\n            qNum['abc']=abc.string();\n            var number=abc.numerator\/abc.denominator;\n            var count=0;\n            while(number\/qNum['l']>=1){\n                count++;\n                if(number\/qNum['l']==1)\n                    qNum['number']='='+count;\n                number\/=qNum['l'];\n            }\n        qNum['question']='<p>Simplify the following:<\/p><p>[$]log_[l]([a])[pm1]log_[l]([b])[pm2][?log][$]<\/p>';\n        qNum['answer']='<p>[$]=log_[l]([a][md1][b][md2][c])=log_[l]([abc])[number][$]<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Linear Functions", "Gradient", "Gradient 1"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \n            var qNum={  'x1' :   randomInt(-10,15),\n                    'y1' :   randomInt(-10,15),\n                    'x2' :   randomInt(-10,15),\n                    'y2' :   randomInt(-10,15),\n                    \"$\" :   \"`\"\n            };\n            var m=new Fraction(qNum['y2']-qNum['y1'],qNum['x2']-qNum['x1']);\n            qNum['m']=m.string();\n        qNum['question']='<p>What is the gradient of the line passing through the points [$]([x1],[y1])[$] and [$]([x2],[y2])[$]?<\/p>';\n        qNum['answer']='<p>Using the gradient formula:<\/p><p>[$]m=(y_2-y_1)\/(x_2-x_1)[$]<\/p><p>We have:<\/p><p>[$]m=([y2]- [y1])\/([x2]- [x1])=[m][$]<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Linear Functions", "Gradient", "Gradient 2"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \n\t\t\tvar qNum={  'x1' :   randomInt(-5,5),\n                    'y1' :   randomInt(-5,5),\n                    'x2' :   randomInt(-5,5),\n                    'y2' :   randomInt(-5,5),\n                    'ifneg':    '',\n                    \"$\" :   \"`\"\t\n            };\n            while(qNum['x1']==qNum['x2'])\n                qNum['x2']=randomInt(-6,6);\n            while(qNum['y1']==qNum['y2'])\n                qNum['y2']=randomInt(-6,6);\n            qNum['rise']=Math.abs(qNum['y2']-qNum['y1']);\n            qNum['run']=Math.abs(qNum['x2']-qNum['x1']);\n            var m=new Fraction(qNum['y2']-qNum['y1'],qNum['x2']-qNum['x1']);\n            qNum['m']=m.string();\n            if(m.numerator<0)\n                qNum['ifneg']='<br\/>Since the line goes downhill, it has a negative gradient'\n                \n            var qGraph=new graphit('qG',-6,6,-6,6,20);\n            var aGraph=new graphit('aG',-6,6,-6,6,20);\n            \n            qGraph.lineExtend('qLine',qNum['x1'],qNum['y1'],qNum['x2'],qNum['y2']);\n            aGraph.lineExtend('aLine',qNum['x1'],qNum['y1'],qNum['x2'],qNum['y2']);\n            aGraph.line('rise',qNum['x2'],qNum['y1'],qNum['x2'],qNum['y2']);\n            aGraph.line('run',qNum['x1'],qNum['y1'],qNum['x2'],qNum['y1']);\n            aGraph.stroke('rise','blue');\n            aGraph.stroke('run','blue');\n            \n            qNum['qgraph']=qGraph.toString();\n            qNum['agraph']=aGraph.toString();\n            \n            \n           \n        qNum['question']='<p>What is the gradient of the line graphed here?<\/p><p>[qgraph]<\/p>';\n        qNum['answer']='[agraph]<p>Using the fact that the line passes through [$]([x1],[y1])[$] and [$]([x2],[y2])[$] we can determine that the rise is [rise] and the run is [run].[ifneg] <br \/>Hence the gradient is [$][m][$].<\/p>';            \n\t\t\t\n        "
    }, {
        "category": ["Linear Functions", "Equation of a Line", "Equation of a line 1"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \n            var qNum={  'x1' :   0,\n                    'y1' :   randomInt(-5,5),\n                    'x2' :   randomInt(1,5),\n                    'y2' :   randomInt(-5,5),\n                    \"$\" :   \"`\"\t\n            };\n            while(qNum['y1']==qNum['y2'])\n                qNum['y2']=randomInt(-5,5);            \n            var rise=qNum['y2']-qNum['y1'];\n            var run=qNum['x2']-qNum['x1'];\n            var g=gcd(Math.abs(rise),Math.abs(run));\n            if(g!=1){\n                qNum['x2']=run\/g;\n                qNum['y2']=qNum['y1']+rise\/g;\n            }\n            var m=new Fraction(qNum['y2']-qNum['y1'],qNum['x2']-qNum['x1']);\n            qNum['m']=m.string();\n\t\t\t\n\t\t\tvar questionGraph=new graphit('qG',-5,5,-5,5,15);\n\t\t\tvar answerGraph=new graphit('aG',-5,5,-5,5,12);\t\t\t\n \t\t\t\n            questionGraph.lineExtend('qline',qNum['x1'],qNum['y1'],qNum['x2'],qNum['y2']);\n            answerGraph.lineExtend('aline',qNum['x1'],qNum['y1'],qNum['x2'],qNum['y2']);\n            answerGraph.line('rise',qNum['x1'],qNum['y1'],qNum['x1'],qNum['y2']);\n            answerGraph.stroke('rise','blue');\n            answerGraph.line('run',qNum['x1'],qNum['y2'],qNum['x2'],qNum['y2']);\n            answerGraph.stroke('run','blue');\n            answerGraph.dot('intercept',qNum['x1'],qNum['y1']);\n            answerGraph.fill('intercept','green');\n\t\t\t\t\t\t\n\t\t\tqNum['qGraph']=questionGraph.toString();\n\t\t\tqNum['aGraph']=answerGraph.toString();\n            qNum['question']='<p>[qGraph]<\/p><p>What is the equation of the line graphed here?<\/p>';\n            qNum['answer']='<p>[aGraph]<\/p><p>This line has a <span style=\"color: blue\">gradient<\/span> of [$][m][$] and a <span style=\"color: green\">y-intercept<\/span> of [$][y1][$].<\/p><p>Hence its equation is [$]y=[!m]x[+@y1][$]<\/p>';\n        \n        "
    }, {
        "category": ["Linear Functions", "Equation of a Line", "Equation of a line 2"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \n\t\t\tvar qGraph=new graphit('qGraph',-5,5,-5,5,30);\t\t\n\t\t\tvar aGraph=new graphit('aGraph',-5,5,-5,5,15);\t\t\t\n\t\t\t\t\t\t\n\t\t\t\n            var m=new Fraction(nonZeroRand(-5,5),randomInt(1,5));\n            var qNum={  'b' :   randomInt(-5,5),\n                    'm' :   m.string(),\n                    \"$\" :   \"`\"\t\n            };\n            aGraph.lineExtend('line',0,qNum['b'],m.denominator,qNum['b']+m.numerator);\n            qGraph.text('instructions',-3,-1.5,'Click and Drag to draw a line');\n            qGraph.stroke('instructions','grey');\n\t\t\t\t\t\t\n\t\t\tqNum['qGraph']=qGraph.toString()\n\t\t\tqNum['aGraph']=aGraph.toString();\t\t\t\t\t\t\n\t\t\t\n\t\t\tqGraph.ClickIt = function(X,Y){\n\t\t\t\tthis.mouseDownX=X\n\t\t\t\tthis.mouseDownY=Y\n\t\t\t\tthis.hide('instructions');\n\t\t\t\tthis.dot('dot1',X,Y);\n\t\t\t\tthis.show('dot1');\n\t\t\t\tthis.clicked = true;\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tqGraph.DragIt = function(X,Y)\n\t\t\t{\n\t\t\t\tif(this.clicked){\n\t\t\t\t\tif(X!=this.mouseDownX || Y!=this.mouseDownY){  \n\t\t\t\t\t\tthis.moved=true;\n\t\t\t\t\t\tthis.dot('dot2',X,Y);\n\t\t\t\t\t\tthis.lineExtend('line2',this.mouseDownX,this.mouseDownY,X,Y);\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n        \n        qGraph.SetIt= function(X,Y)\n\t\t{\n            this.clicked = false;\n            if(this.moved){\n                this.mouseMoveX=this.mouseDownX;\n                this.mouseMoveY=this.mouseDownY;                \n            }\n            else{\n                if(this.mouseMoveX)\n                    this.dot('dot1',this.mouseMoveX,this.mouseMoveY);\n                else{\n                    this.hide('dot1');\n                    this.show('instructions');\n                }\n            }\n            this.moved=false;\n\t\t}\n        qNum['question']='<p>What would the graph of the line:<\/p><p>[$]y=[!m]x[+@b][$]<\/p><p>look like?<\/p>';\n        qNum['answer']='[aGraph]';\n        qNum['answerType']=qGraph.SVG;                \n\t\t\t\n        "
    }, {
        "category": ["Linear Functions", "Equation of a Line", "Parrallel\/Perpendicular Lines"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \n\t  var m=new Fraction(nonZeroRand(-5,5),nonZeroRand(5,-5));\n\t  var qNum={  'x1' :   randomInt(-10,10),\n\t\t\t  'y1' :   randomInt(-10,10),\n\t\t\t  'p' :   randomArrayElement(['perpendicular','parallel']),\n\t\t\t  \"$\" :   \"`\"\n\t\t  };\n\t  var a=randomInt(1,9);\n\t  var b=nonZeroRand(-9,9);\n\t  var c=randomInt(-12,12);\n\t  var l1=new algebra();\n\t  var x=new term();\n\t  x.addSymbol('x',new Fraction(1,1));\n\t  var y=new term();\n\t  y.addSymbol('y',new Fraction(1,1));\n\t  var m1,m2,yi;\n\t  if(randomInt(0,1)){\n\t\tl1.coef[0]=new Fraction(a,1)\n\t\tl1.terms[0]=x;\n\t\tl1.coef[1]=new Fraction(b,1)\n\t\tl1.terms[1]=y;\n\t\tl1.coef[2]=new Fraction(c,1)\n\t\tl1.terms[2]=new term();\n\t\tqNum['line1']=l1.string()+'=0';\n\t\tm1=new Fraction(a*-1,b);\n\t\tyi=c*-1\/b;\n\t  }\n\t  else{\n\t\tl1.coef[0]=new Fraction(b,a);\n\t\tl1.terms[0]=x;\n\t\tif(c!=0){\n\t\t  l1.coef[1]=new Fraction(c,1);\n\t\t  l1.terms[1]=new term();\n\t\t}\n\t\tqNum['line1']='y='+l1.string();\n\t\tm1=new Fraction(b,a);\n\t\tyi=c;\n\t  }\n\t  qNum['m1']=m1.string();\n\t  var X=0,Y=0;\n\t  if(qNum['p']=='perpendicular')\n\t  m2=new Fraction(m1.denominator*-1,m1.numerator)\n\t  else\n\t  m2=m1;\n\t  qNum['m2']=m2.string();\n  \n\t  var l2=new algebra();\n\t  l2.coef[0]=m2;\n\t  l2.terms[0]=x;\n\t  l2.coef[1]=m2.mult(new Fraction(qNum['x1']*-1,1)).add(new Fraction(qNum['y1'],1));\n\t  l2.terms[1]=new term();\n\t  qNum['line2']='y='+l2.string();\n  \n\t  var b1=l2.coef[1].numerator\/l2.coef[1].denominator;\n\t  if(qNum['p']=='perpendicular'){\n\t\tvar m1I=m1.numerator\/m1.denominator;\n\t\tvar m2I=m2.numerator\/m2.denominator;\n\t\tX=(yi-b1)\/(m2I-m1I);\n\t\tY=(yi*m2I-b1*m1I)\/(m2I-m1I);\n\t  }\n\t  var ymin=Math.min(qNum['y1'],Y,b1,0);\n\t  var ymax=Math.max(qNum['y1'],Y,b1,0);\n\t  var xmin=Math.min(qNum['x1'],X,0);\n\t  var xmax=Math.max(qNum['x1'],X,0);\n  \n\t  var wide=xmax-xmin;\n\t  var high=ymax-ymin;\n\t  \n\t  var canavasX=400;\n\t  var canvasY=200;\n\t  var cellSize=20;\n\t  var xstep=Math.ceil((wide+2)\/canavasX*cellSize);\n\t  var ystep=Math.ceil((high+2)\/canvasY*cellSize);\n\t  \n\t  var xspacing =Math.round(canavasX\/(wide+2*xstep));\n\t  var yspacing =Math.round(canvasY\/(high+2*ystep));\n\t  var spacing=Math.min(xspacing,yspacing);\n  \n\t  var hfit=Math.round(canavasX\/(spacing));\n\t  var vfit=Math.round((canvasY\/(spacing)));\n  \n\t  var diff=Math.floor(Math.max(hfit-2*xstep-wide,0)\/2);\n\t  xmin-=diff;\n\t  xmax+=diff;\n\t  diff=Math.floor(Math.max(vfit-2*ystep-high,0)\/2);\n\t  ymin-=diff;\n\t  ymax+=diff;\n  \n\t  var answergraph=new graphit('theanswer',xmin,xmax,ymin,ymax,Math.min(xspacing,yspacing));\n  \n\t  answergraph.xstep=Math.ceil(20\/answergraph.spacing);\n\t  answergraph.ystep=Math.ceil(20\/answergraph.spacing);\n\t  if(answergraph.xstep>1 || answergraph.ystep>1)\n\t\tanswergraph.drawGrid();\n  \n\t  answergraph.graphLine('line1',m1,yi);\n\t  answergraph.stroke('line1','blue');\n\t  answergraph.graphLine('line2',m2,b1);\n\t  answergraph.dot('p1',qNum['x1'],qNum['y1']);\n\t  qNum['diagramAnswerHere']=answergraph.toString();\n        qNum['question']='<p>Find the equation of the line that is [p] to the line [$][line1][$] and passes through the point [$]([x1],[y1])[$]<\/p>';\n        qNum['answer']='<p>Line <span style=\"color: blue\"> [$][line1][$]<\/span> has gradient [$][m1][$]. Since we want a line [p] to it, we are looking for a line with gradient [$][m2][$].<\/p><p>Using the point\/gradient formula:<br\/> [$]y- [y1]=[m2](x- [x1])[$]<\/p><p>The equation is [$][line2][$]<\/p><p>[graph]<\/p>[diagramAnswerHere]';          \t  \n\t\t\t\n        "
    }, {
        "category": ["Linear Functions", "Equation of a Line", "Two-Point Formula"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \n\t    var m=new Fraction(nonZeroRand(-5,5),nonZeroRand(5,-5));\n\t    var qNum={  'x1' :   randomInt(-10,10),\n                    'y1' :   randomInt(-10,10),\n\t\t    'x2' :   randomInt(-10,10),\n                    'y2' :   randomInt(-10,10),\n                    \"$\" :   \"`\"\n            };\n\t    if(qNum['x1']==qNum['x2'])\n\t\tqNum['x2']++;\n            if(qNum['y1']==qNum['y2'])\n\t\tqNum['y2']++;\n\t    var m=new Fraction(qNum['y2']-qNum['y1'],qNum['x2']-qNum['x1']);\n\t    qNum['m']=m.string();\n\n\t    var xmin=Math.min(Math.min(qNum['x1'],qNum['x2']),0);\n\t    var xmax=Math.max(Math.max(qNum['x1'],qNum['x2']),0);\n\t    var ymin=Math.min(Math.min(qNum['y1'],qNum['y2']),0);\n\t    var ymax=Math.max(Math.max(qNum['y1'],qNum['y2']),0);\n\n\t    var wide=xmax-xmin;\n\t    var high=ymax-ymin;\n\t    var xstep=Math.ceil((wide+2)\/8);\n\t    var ystep=Math.ceil((high+2)\/6.5);\n\n\t    var xspacing =Math.round(160\/(wide+2*xstep));\n\t    var yspacing =Math.round(130\/(high+2*ystep));\n\t    var spacing=Math.min(xspacing,yspacing);\n\n\t    var hfit=Math.round(160\/(spacing));\n\t    var vfit=Math.round((130\/(spacing)));\n\n\t    var diff=Math.floor(Math.max(hfit-2*xstep-wide,0)\/2);\n\t    xmin-=diff;\n\t    xmax+=diff;\n\t    diff=Math.floor(Math.max(vfit-2*ystep-high,0)\/2);\n\t    ymin-=diff;\n\t    ymax+=diff;\n\n\t    var answergraph=new graphit('theanswer',xmin,xmax,ymin,ymax,Math.min(xspacing,yspacing));\n\n\t    answergraph.xstep=Math.ceil(20\/answergraph.spacing);\n\t    answergraph.ystep=Math.ceil(20\/answergraph.spacing);\n\t    if(answergraph.xstep>1 || answergraph.ystep>1)\n\t\tanswergraph.drawGrid();\n\n\t    answergraph.lineExtend('answer',qNum['x1'],qNum['y1'],qNum['x2'],qNum['y2']);\n\t    answergraph.dot('p1',qNum['x1'],qNum['y1']);\n\t    answergraph.dot('p2',qNum['x2'],qNum['y2']);\n            qNum['graph']=answergraph.toString();\n\n\t    var x1=new Fraction(qNum['x1'],1);\n\t    var y1=new Fraction(qNum['y1'],1);\n\t    var nOne=new Fraction(-1,1);\n\n\t    var x=new term();\n\t    x.addSymbol('x',new Fraction(1,1));\n\t    var y=new term();\n\t    y.addSymbol('y',new Fraction(1,1));\n\t    var mx1=new algebra();\n\t    mx1.coef[0]=m;\n\t    mx1.terms[0]=x;\n\t    mx1.coef[1]=x1.mult(nOne).mult(m);\n\t    mx1.terms[1]=new term();\n\t    qNum['mx1']=mx1.string();\n\t    var yy1=new algebra();\n\t    yy1.coef[0]=new Fraction(1,1);\n\t    yy1.terms[0]=y;\n\t    yy1.coef[1]=y1.mult(nOne);\n\t    yy1.terms[1]=new term();\n\t    qNum['yy1']=yy1.string();\n\t    yy1.coef.splice(0,1);\n\t    yy1.terms.splice(0,1);\n\t    var mxb=mx1.sub(yy1);\n\t    qNum['mxb']=mxb.string();\n        qNum['question']='<p>What is the equation of the line passing through the points [$]([x1],[y1])[$] and [$]([x2],[y2])[$]?<\/p>';\n        qNum['answer']='<p>Using the two-point formula: [$](y-y_1)\/(x-x_1)=(y_2-y_1)\/(x_2-x_1)[$]<\/p><p>[$](y- [y1])\/(x- [x1])=([y2]-[y1])\/([x2]- [x1])=[m][$]<br\/>[$][yy1]=[m](x- [x1])=[mx1][$]<br\/>[$]y=[mx1][+y1][$]<\/p><p>[$]y=[mxb][$]<\/p><p>[graph]<\/p>';            \n\t  \n        "
    }, {
        "category": ["Linear Functions", "Equation of a Line", "Point-Gradient Formula"],
        "subject": ["UONPREP093", "EPMATH135", "EPMATH302"],
        "code": " \n\t  \n\t    var m=new Fraction(nonZeroRand(-5,5),nonZeroRand(5,-5));\n\t    var qNum={  'x1' :   randomInt(-10,20),\n                    'y1' :   randomInt(-10,20),\n\t\t    'm'\t :   m.string(),\n                    \"$\" :   \"`\"\n            };\n\t    var xi=qNum['x1']-qNum['y1']*m.denominator\/m.numerator;\n\t    var yi=qNum['y1']-m.numerator*qNum['x1']\/m.denominator;\n\t    var xmin=Math.floor(Math.min(xi,0));\n\t    var xmax=Math.ceil(Math.max(xi,0));\n\t    var ymin=Math.floor(Math.min(yi,0));\n\t    var ymax=Math.ceil(Math.max(yi,0));\n\t    if(xi==0 && yi==0){\n\t\txmin=0;\n\t\txmax=m.denominator*2;\n\t\tymin=0;\n\t\tif(m.negative)\n\t\t    ymax=m.numerator*-2;\n\t\telse\n\t\t    ymax=m.numerator*2;\n\t    }\n\t    var wide=xmax-xmin;\n\t    var high=ymax-ymin;\n\t    var xstep=Math.ceil((wide+2)\/12);\n\t    var ystep=Math.ceil((high+2)\/6.5);\n\n\t    var xspacing =Math.round(240\/(wide+2*xstep));\n\t    var yspacing =Math.round(130\/(high+2*ystep));\n\t    var spacing=Math.min(xspacing,yspacing);\n\n\t    var hfit=Math.round(260\/(spacing));\n\t    var vfit=Math.round((120\/(spacing)));\n\n\t    var diff=0;\n\t    if(xmin==0)\n\t\tdiff=Math.floor(Math.max(hfit-2*xstep-xmax,0)\/2);\n\t    else\n\t\tdiff=Math.floor(Math.max(hfit-2*xstep+xmin,0)\/2);\n\t    xmin-=diff;\n\t    xmax+=diff;\n\t    if(ymin==0)\n\t\tdiff=Math.floor(Math.max(vfit-2*ystep-ymax,0)\/2);\n\t    else\n\t\tdiff=Math.floor(Math.max(vfit-2*ystep+ymin,0)\/2);\n\t    ymin-=diff;\n\t    ymax+=diff;\n\n\t    var answergraph=new graphit('theanswer',xmin,xmax,ymin,ymax,Math.min(xspacing,yspacing));\n\n\t\tanswergraph.xstep=Math.ceil(20\/answergraph.spacing);\n\t\tanswergraph.ystep=Math.ceil(20\/answergraph.spacing);\n\t\tif(answergraph.xstep>1 || answergraph.ystep>1)\n\t\t    answergraph.drawGrid();\t   \n\n\t    if(xi==0 && yi==0)\n\t\t\tanswergraph.graphLine('answer',m,yi);\n\t    else\n\t\t\tanswergraph.lineExtend('answer',0,yi,xi,0);\t\t\t\n            qNum['graph']=answergraph.toString();\n\n\t    var x1=new Fraction(qNum['x1'],1);\n\t    var y1=new Fraction(qNum['y1'],1);\n\t    var nOne=new Fraction(-1,1);\n\n\t    var x=new term();\n\t    x.addSymbol('x',new Fraction(1,1));\n\t    var y=new term();\n\t    y.addSymbol('y',new Fraction(1,1));\n\t    var mx1=new algebra();\n\t    mx1.coef[0]=m;\n\t    mx1.terms[0]=x;\n\t    mx1.coef[1]=x1.mult(nOne).mult(m);\n\t    mx1.terms[1]=new term();\n\t    qNum['mx1']=mx1.string();\n\t    var yy1=new algebra();\n\t    yy1.coef[0]=new Fraction(1,1);\n\t    yy1.terms[0]=y;\n\t    yy1.coef[1]=y1.mult(nOne);\n\t    yy1.terms[1]=new term();\n\t    qNum['yy1']=yy1.string();\n\t    yy1.coef.splice(0,1);\n\t    yy1.terms.splice(0,1);\n\t    var mxb=mx1.sub(yy1);\n\t    qNum['mxb']=mxb.string();\n        qNum['question']='<p>What is the equation of the line passing through the point [$]([x1],[y1])[$] with a gradient of [$][m][$]?<\/p>';\n        qNum['answer']='<p>Using the point-gradient formula: [$]y-y_1=m(x-x_1)[$]<\/p><p>[$]y- [y1]=[m](x- [x1])[$]<br\/>[$][yy1]=[mx1][$]<br\/>[$]y=[mx1][+y1][$]<\/p><p>[$]y=[mxb][$]<\/p><p>[graph]<\/p>';\n\t  \n        "
    }, {
        "category": ["Statistics", "Representing Data", "Frequency Distribution Tables"],
        "subject": ["EPMATH235", "EPMATH302"],
        "code": "\n            \n                var r=randomInt(2,5), c=randomInt(5,10), range=randomInt(4,8), min=randomLowInt(0,120);\n                var freq=new statTable('freqTable',range+3,4,true);\n                freq.data[0][0]='Score';\n                freq.data[1][0]='Frequency';\n                freq.data[2][0]='Cumulative<\/br>Frequency';\n                freq.data[3][0]='Relative<\/br>Frequency';\n                freq.data[0][range+2]='TOTAL';\n                freq.data[1][range+2]=r*c;\n                freq.data[2][range+2]='';\n                freq.data[3][range+2]='100%';\n                for(var i=0; i<=range;i++){\n                    freq.data[0][i+1]=min+i;\n                    freq.data[1][i+1]=0;\n                }\n                var table=new statTable('dataTable',r,c);\n                for(var i=0;i<c;i++){\n                    for(var j=0;j<r;j++){\n                        var d=randomInt(min,min+range);\n                        table.data[i][j]=d;\n                        freq.data[1][d-min+1]++;                    \n                    }\n                }\n                for(var i=0; i<=range;i++){\n                    if(i==0)\n                        freq.data[2][i+1]=freq.data[1][i+1];\n                    else\n                        freq.data[2][i+1]=freq.data[1][i+1]+freq.data[2][i];\n                    freq.data[3][i+1]=Math.round(freq.data[1][i+1]\/(r*c)*100)+'%';\n                }\n                var working=new statTable('workingTable',2,2,true,true);\n                working.clear();\n                var qNum ={ 'data':     table.toString(),\n                            'table':    freq.toString(),\n                            'answerType': working.toNode()\n                };\n                qNum['question']='<p>Organise the following data into a frequency distribution table:<\/p><p>[data]<\/p><p>Put the following columns in your table: frequency, cumulative frequency and relative frequency(%)<\/p>';\n                qNum['answer']='<p>[table]<\/p>';\n            \n        "
    }, {
        "category": ["Statistics", "Representing Data", "Histograms and Polygons"],
        "subject": ["EPMATH235", "EPMATH302"],
        "code": "var min=randomInt(1,150), scores=['Score'], freq=['Frequency'],range=randomInt(5,9), niceScale = [1, 2, 5, 10, 20, 50, 100], p=0,fMax=0,sum=0;var isCumulative=randomInt(0,1), isPolygon=randomInt(0,1);var data=new statTable('data',range+1,2, true);for(var i=1;i<=range;i++){scores[i]=min+i;freq[i]= randomLowInt(1,50);sum+=freq[i];if(fMax<freq[i])fMax=freq[i];}data.addData([scores,freq]);var h=new histogram('chart',scores[1],scores[range],1,freq.slice(1));if(isPolygon)h.setPolygon(true);if(isCumulative){h.setCumulative(true);while(p<niceScale.length-1 && sum\/niceScale[p]>15)p++;}else{while(p<niceScale.length-1 && fMax\/niceScale[p]>15)p++;}h.fScale=niceScale[p];h.draw();var qNum = {'cumulative': (isCumulative)?'<u>cumulative<\/u> ':'','histogram': (isPolygon)?'polygon':'histogram','data': data.toString(),'chart': h.toString()};qNum['question']='<p>Draw a [cumulative] frequency <b>[histogram]<\/b> for the following data:<\/p><p>[data]<\/p>';qNum['answer']='<p>[chart]<\/p>';"
    }, {
        "category": ["Statistics", "Central Tendency", "Mode"],
        "subject": ["EPMATH235", "EPMATH302"],
        "code": "\n            \n                var setSize=randomInt(5,15), setMin=randomInt(0,100), setRange=randomInt(5,10);\n                var set=[], freq=[], fMax=0, fMaxVal=[];\n                for(var i=0;i<setRange;i++)\n                    freq[setMin+i]=0;\n                for(var i=0;i<setSize;i++){\n                    set[i]=randomInt(setMin,setMin+setRange-1);\n                    freq[set[i]]++;\n                    if(fMax<freq[set[i]])\n                        fMax++;\n                }\n                for(var i=0;i<setRange;i++)\n                    if(freq[setMin+i]==fMax)\n                        fMaxVal.push(setMin+i);\n                var qNum = {'data': set.toString(),\n                            's': (fMaxVal.length>1)?'s are':' is',\n                            'mode': fMaxVal.toString()};\n                qNum['question']='<p>Find the mode of the following data set:<\/p><p>[data]<\/p>';\n                qNum['answer']='<p>The mode[s]: [mode]<\/p>';                \n            \n        "
    }, {
        "category": ["Statistics", "Central Tendency", "Median"],
        "subject": ["EPMATH235", "EPMATH302"],
        "code": "\n            \n                cardinalityString=function(int){\n                    if(int%10==1)\n                        return 'st';\n                    else if(int%10==2)\n                        return 'nd';\n                    else if(int%10==3)\n                        return 'rd';\n                    else\n                        return 'th';\n                }\n                \n                var setSize=randomInt(4,16), setMin=randomInt(0,100), setRange=randomInt(5,50);\n                var set=[], sortSet=[], card1='th', card2='th', med1,med2, oneMedian=true;\n                if(setSize%2==0){\n                    med1=setSize\/2;\n                    med2=med1+1;\n                    card1=cardinalityString(med1);\n                    card2=cardinalityString(med2);\n                    oneMedian=false;\n                }\n                else{\n                    med1=(setSize+1)\/2;\n                    card1=cardinalityString(sortSet[med1]);\n                }\n                for(var i=0;i<setSize;i++)\n                    set[i]=randomInt(setMin,setMin+setRange-1);\n                sortSet=set.slice().sort(function(a, b){return a-b});                \n                var qNum = {'data': set.toString(),\n                            'sort':sortSet.toString(),\n                            'n':setSize,\n                            'nth':(oneMedian)?med1+card1+' score':med1+card1+' & '+med2+card2+' scores',\n                            'median': (oneMedian)?sortSet[med1-1]:(sortSet[med1-1]+sortSet[med2-1])\/2};\n                qNum['question']='<p>Find the median of the following data set:<\/p><p>[data]<\/p>';\n                qNum['answer']='<p>First sort the data set:<\/p><p>[sort]<\/p><p>There are [n] scores so find the [nth]<\/p><p>The median is: [median]<\/p>';\n            \n        "
    }, {
        "category": ["Statistics", "Central Tendency", "Mean"],
        "subject": ["EPMATH235", "EPMATH302"],
        "code": "\n                            \n                var setSize=randomInt(4,12), setMin=randomInt(0,100), setRange=randomInt(5,50);\n                var set=[], sum=0;\n                for(var i=0;i<setSize;i++){\n                    set[i]=randomInt(setMin,setMin+setRange-1);\n                    sum+=set[i];\n                }\n                var qNum = {'data': set.toString(),                            \n                            'n':setSize,\n                            'x':sum,\n                            'mean': Math.round(sum*100\/setSize)\/100};\n                qNum['question']='<p>Find the mean of the following data set (2dp):<\/p><p>[data]<\/p>';\n                qNum['answer']='<p>There are [n] scores. The sum of the scores is [x]<\/p><p>The mean is: `[x]\/[n]=[mean]` (2dp)<\/p>';\n            \n        "
    }, {
        "category": ["Statistics", "Central Tendency", "Frequency Tables"],
        "subject": ["EPMATH235", "EPMATH302"],
        "code": "\n            \n                cardinalityString=function(int){\n                    if(int%10==1)\n                        return 'st';\n                    else if(int%10==2)\n                        return 'nd';\n                    else if(int%10==3)\n                        return 'rd';\n                    else\n                        return 'th';\n                }\n                var setMin=randomInt(0,100), setRange=randomInt(5,9);\n                var scores=[], freq=[], cf=[], fx=[], sum=0, n=0, fMax=0, mode=[], median;\n                for(var i=0;i<setRange;i++){\n                    scores[i]=setMin+i;\n                    freq[i]= randomLowInt(1,120);\n                    if(fMax<freq[i]){\n                        fMax=freq[i];\n                        mode=[scores[i]];\n                    }\n                    else if(fMax==freq[i])\n                        mode.push(scores[i]);\n                    n+=freq[i];\n                    if(i)\n                        cf[i]=cf[i-1]+freq[i];\n                    else\n                        cf[i]=freq[i];\n                    fx[i]=scores[i]*freq[i];\n                    sum+=fx[i];\n                }\n                var med=Math.ceil((n+1)\/2), i=0;\n                while(cf[i]<med)\n                    i++;\n                if(n%2==0 && i>0 && cf[i-1]==med-1)\n                    median=(scores[i]+scores[i-1])\/2\n                else\n                    median=scores[i];\n                scores.unshift('Score');\n                scores.push('Total:');\n                freq.unshift('Frequency');\n                freq.push(n);\n                cf.unshift('c.f.');\n                cf.push('');\n                fx.unshift('fx');\n                fx.push(sum);\n                var data=new statTable('data',setRange+1,2,true);\n                data.addData([scores,freq]);\n                var answer=new statTable('answer',setRange+2,4,true);\n                answer.addData([scores,freq,cf,fx]);\n                var working=new statTable('working',2,2,true,true);\n                working.clear();\n                var qNum = {'data': data.toString(),\n                            'table':answer.toString(),\n                            'n':n,\n                            'sum':sum,\n                            'mode':mode.toString(),\n                            'f':fMax,\n                            'median':median,\n                            'med':(n%2==0)?(med-1)+' &amp; '+med:med,\n                            'cf':cf[i+1],\n                            'mean': Math.round(sum*100\/n)\/100};\n                qNum['question']='<p>Find the mode, median and mean of the following data set:<\/p><p>[data]<\/p>';\n                qNum['answer']='<p>[table]<\/p><p>The highest frequency is [f], so the mode is: [mode]<\/p><p>There are [n] scores, so look for [med] in cf column. The median is [median] (cf=[cf])<\/p><p>mean`=[sum]\/[n]=[mean]` (2dp)<\/p>';\n                qNum['answerType']=working.toNode();\n            \n        "
    }, {
        "category": ["Statistics", "Measures of Dispersion", "Box Plots"],
        "subject": ["EPMATH235", "EPMATH302"],
        "code": "\n            \n                var dataType=randomInt(0,2), box, data=[],range=0,iqr=0,aTable;\n                if(dataType){\n                    var min=randomInt(0,50),max=randomInt(min,min*10),n=randomInt(5,10);\n                    var dMin=500,dMax=0, med,q1,q3;\n                    for(var i=0;i<n;i++){\n                        data[i]=randomInt(min,max);\n                        if(dMax<data[i])\n                            dMax=data[i];\n                        if(data[i]<dMin)\n                            dMin=data[i];\n                    }\n                    range=dMax-dMin;\n                    sortData=data.slice().sort(function(a, b){return a-b});\n                    if(n%2==0){\n                        med=(sortData[n\/2-1]+sortData[n\/2])\/2;\n                        if(n%4==0){\n                            q1=(sortData[n\/4-1]+sortData[n\/4])\/2;\n                            q3=(sortData[n\/4*3-1]+sortData[n\/4*3])\/2;\n                        }\n                        else{\n                            q1=sortData[Math.ceil(n\/4)-1];\n                            q3=sortData[Math.ceil(n\/4*3)-1];\n                        }\n                    }\n                    else{\n                        med=sortData[(n+1)\/2-1];\n                        if((n-1)%4==0){\n                            q1=(sortData[(n-1)\/4-1]+sortData[(n-1)\/4])\/2;\n                            q3=(sortData[(n-1)\/4*3]+sortData[(n-1)\/4*3+1])\/2;\n                        }\n                        else{\n                            q1=sortData[Math.ceil(n\/4)-1];\n                            q3=sortData[Math.ceil(n\/4*3)-1];\n                        }\n                    }\n                    iqr=q3-q1;                   \n                    box=boxPlot(dMin,q1,med,q3,dMax);                    \n                }\n                else{\n                    var min=randomInt(1,150), n=0, cf=[0], scores=['Score'], freq=['Frequency'];\n                    range=randomInt(4,9);\n                    data=new statTable('data',range+2,2, true);\n                    aTable=new statTable('answer',range+2,3,true);\n                    for(var i=1;i<=range+1;i++){\n                        scores[i]=min+i;\n                        freq[i]= randomLowInt(1,50);\n                        n+=freq[i];\n                        cf[i]=cf[i-1]+freq[i];\n                    }\n                    cf[0]='c.f.';\n                    data.addData([scores,freq]);\n                    aTable.addData([scores,freq,cf]);\n                    var q1=-1,m=-1,q3=-1, i=1;\n                    while(q3==-1){\n                        if(q1==-1 && cf[i]>=n\/4)\n                            q1=i;\n                        if(m==-1 && cf[i]>=n\/2)\n                            m=i;\n                        if(q3==-1 && cf[i]>=3*n\/4)\n                            q3=i;\n                        i++;\n                    }\n                    iqr=scores[q3]-scores[q1];\n                    box=boxPlot(scores[1],scores[q1],scores[m],scores[q3],scores[range+1]);                    \n                }\n                var d = document.createElement('div');\n                d.appendChild(box);                \n                var qNum = {'data': data.toString(),\n                            'range': range,\n                            'IQR': iqr,\n                            'reorder':(dataType)?'<p>sorting data first:'+sortData.toString()+'<\/p>':'',\n                            'box': d.innerHTML,\n                            'answerTable':(dataType)?'':'<\/br>(using cumulative frequencies)'+ aTable.toString()\n                        };\n                qNum['question']='<p>Draw a box and whiskers plot for the following data<\/p><p>[data]<\/p><p>State the range and interquartile range.<\/p>';\n                qNum['answer']='<p>[reorder][box][answerTable]<\/p><p>Range = [range], interquartile range = [IQR]<\/p>';                \n            \n        "
    }]